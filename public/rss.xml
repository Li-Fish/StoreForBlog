<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Fish&#39;s Blog</title>
    <link>https://li-fish.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
<<<<<<< HEAD
    <pubDate>Mon, 22 Jan 2018 11:26:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>UVA4885 - Task（差分约束）</title>
      <link>https://li-fish.github.io/2018/01/22/UVA4885-Task%EF%BC%88%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2018/01/22/UVA4885-Task%EF%BC%88%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%EF%BC%89/</guid>
      <pubDate>Mon, 22 Jan 2018 11:14:16 GMT</pubDate>
=======
    <pubDate>Mon, 27 Nov 2017 03:08:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>线性基小结</title>
      <link>https://li-fish.github.io/2017/11/27/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%B0%8F%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/11/27/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%B0%8F%E7%BB%93/</guid>
      <pubDate>Mon, 27 Nov 2017 02:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.sengxian.com/algorithms/linear-basis&quot; target=&quot;_b
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://blog.sengxian.com/algorithms/linear-basis" target="_blank" rel="external">Sengxian’s Blog</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感觉 Sengxian 的博客里面写的太好了，然后这里只打算添加一下自己的理解了。</p><p>首先所谓的线性基，就是把若干个整数，看成 n 维 01 向量（通常 n 不会超过 64，即 long long 的范围），然后求这些向量的一个极大无关组。需要注意的一点是，对于这里的 01 向量，只有异或运算。</p><p>不过一般为了方便处理，我们会把极大无关组进行列变换化最简形。<strong>一个向量空间可以有多个基，但是化为最简形后基是唯一的。化为最简形后和原来是等价的，由化最简形后的向量组可以表示的向量都可以由原向量组来表示。</strong></p><p>下面是利用高斯消元求解线性基的代码，由 Sengxian 的代码改过来的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = MAX_BASE; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (b[j]) data[i] ^= b[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    b[j] = data[i];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="keyword">if</span> (b[k] &amp;&amp; b[j] &gt;&gt; k &amp; <span class="number">1</span>) b[j] ^= b[k];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= MAX_BASE; k++) <span class="keyword">if</span> (b[k] &gt;&gt; j &amp; <span class="number">1</span>) b[k] ^= b[j];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="SGU-275"><a href="#SGU-275" class="headerlink" title="SGU-275"></a>SGU-275</h1><p>给出 N 个数，求 N 个数异或可以得到的最大值，数的范围在 long long 内。</p><p>求出线性基，然后异或就是答案，这里 Sengxian 博客有证明，不过这里补充一点，<strong>对于上面算法得到的线性基是唯一的</strong>。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_BASE = <span class="number">63</span>;</div><div class="line"></div><div class="line">ll b[<span class="number">200</span>];</div><div class="line">ll a[<span class="number">11234</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = MAX_BASE; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i] &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (b[j]) a[i] ^= b[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    b[j] = a[i];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="keyword">if</span> (b[k] &amp;&amp; b[j] &gt;&gt; k &amp; <span class="number">1</span>) b[j] ^= b[k];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= MAX_BASE; k++) <span class="keyword">if</span> (b[k] &gt;&gt; j &amp; <span class="number">1</span>) b[k] ^= b[j];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</div><div class="line">        &#125;</div><div class="line">        cal(n);</div><div class="line">        ll ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= MAX_BASE; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (b[i] &gt;&gt; i &amp; <span class="number">1</span>) ans ^= b[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="CF-895C"><a href="#CF-895C" class="headerlink" title="CF-895C"></a>CF-895C</h1><p>给出 N 个数的集合，问能取出多少不同的子集，使得乘积是平方数。输入的数字小于 70 。</p><p>对平方数进行质因数分解，会发现每个质因子的幂都是偶数。现在对输入的 N 个数进行质因数分解，对每个质因子只对它的幂的奇偶性有关，可以计算小于 70 的质因子只有 20 个，那么我们用一个 01 变量来表示每个数质因子奇偶性的情况。</p><p>然后我们对这 N 个 01 向量求线性基，那么答案就是 $2^{N - BaseSize} - 1$，注意线性基其实就是选了若干个线性无关的向量并且化简后的结果。这时候对于没有选中的向量，取任意子集，异或得到的向量都可以由线性基基来表示，总共有上面答案数的子集（减去了空集）。对于线性基选中的向量，因为是线性无关，所以不能互相表示，不贡献答案。</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">112345</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_BASE = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> now_prime[<span class="number">200</span>];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; primes;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_primes</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">70</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (now_prime[i]) <span class="keyword">continue</span>;</div><div class="line">        primes.push_back(i);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt;= <span class="number">70</span>; j += i) &#123;</div><div class="line">            now_prime[j] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> raw_data[MAX];</div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; primes.size(); i++) &#123;</div><div class="line">        <span class="keyword">while</span> (n % primes[i] == <span class="number">0</span>) &#123;</div><div class="line">            rst ^= (<span class="number">1</span> &lt;&lt; i);</div><div class="line">            n /= primes[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> b[<span class="number">200</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = MAX_BASE; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (b[j]) data[i] ^= b[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    b[j] = data[i];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="keyword">if</span> (b[k] &amp;&amp; b[j] &gt;&gt; k &amp; <span class="number">1</span>) b[j] ^= b[k];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= MAX_BASE; k++) <span class="keyword">if</span> (b[k] &gt;&gt; j &amp; <span class="number">1</span>) b[k] ^= b[j];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(ll a, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll rst = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (k) &#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) rst = rst * a % MOD;</div><div class="line">        a = a * a % MOD;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    get_primes();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, raw_data + i);</div><div class="line">        data[i] = solve(raw_data[i]);</div><div class="line">    &#125;</div><div class="line">    cal(n);</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= MAX_BASE; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (b[i]) cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (pow_mod(<span class="number">2</span>, n - cnt) - <span class="number">1</span> + MOD) % MOD);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/27/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%B0%8F%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>K-D树小结</title>
      <link>https://li-fish.github.io/2017/11/20/K-D%E6%A0%91%E5%B0%8F%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/11/20/K-D%E6%A0%91%E5%B0%8F%E7%BB%93/</guid>
      <pubDate>Mon, 20 Nov 2017 11:05:08 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;资料-amp-感谢&quot;&gt;&lt;a href=&quot;#资料-amp-感谢&quot; class=&quot;headerlink&quot; title=&quot;资料&amp;amp;感谢&quot;&gt;&lt;/a&gt;资料&amp;amp;感谢&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.sengxian.com/algorit
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="资料-amp-感谢"><a href="#资料-amp-感谢" class="headerlink" title="资料&amp;感谢"></a>资料&amp;感谢</h1><p><a href="https://blog.sengxian.com/algorithms/k-dimensional-tree" target="_blank" rel="external"><a href="https://blog.sengxian.com/" target="_blank" rel="external">Sengxian’s Blog</a></a></p><p><a href="https://www.bilibili.com/video/av7039143/?from=search&amp;seid=12824880607180236401" target="_blank" rel="external">QSC算法讲堂</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>K-D 树是 K 维树（k-dimensional tree）的缩写，可以用来寻找 K 维空间中距离一个点最近的若干个点，不过在 ACM 中一般用来处理平面的最近点对问题。</p><p>K-D 树实质上是一颗二叉树，所以可以做到插入删除点都是 $O(\log n)$，在建树的时候每次按一个维度排序后，取中间点把空间划分为两部分，在这个维度上小于中间点的放到左儿子，大于中间点的放到右儿子。</p><p>这里为了简单，首先从一维的 K-D 树入手。</p><h2 id="一维的-K-D-树"><a href="#一维的-K-D-树" class="headerlink" title="一维的 K-D 树"></a>一维的 K-D 树</h2><p><img src="http://chuantu.biz/t6/152/1511176656x-1566638157.png" alt="一维 K-D 树"></p><p>上图是一颗一维的 K-D，对于一维的情况，所有的点都是数轴上的点，那么这时候<br>K-D 树就是一颗普通的二叉搜索树（Binary Search Tree）。</p><h2 id="二维的-K-D-树"><a href="#二维的-K-D-树" class="headerlink" title="二维的 K-D 树"></a>二维的 K-D 树</h2><p><img src="http://chuantu.biz/t6/152/1511176920x-1566638157.png" alt="二维 K-D 树"></p><p>这时候就是交替的按 x 维和 y 维排序进行划分的。上面就是对点集 <code>(2,3), (5,4), (9,6), (4,7), (8,1), (7,2)</code>的划分。</p><p><img src="http://chuantu.biz/t6/152/1511177069x-1566638157.png" alt=""></p><p>上面的划分对应的树型结构就是这样的，对于第一层，左子树的点的 x 坐标都小于根节点，右子树的点的 x 坐标都大于根节点。对于第二层，左子树的点的 y 坐标都小于根节点，右子树的点的 y 坐标都大于根节点，以此类推。</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>K-D 树的每个节点不仅要保存当前点的坐标信息，还要维护当前子树每个维度上的边界点。</p><p>这里 <a href="https://blog.sengxian.com/algorithms/k-dimensional-tree" target="_blank" rel="external">Sengxian</a> 巨巨写的非常好，就直接引用了。</p><blockquote><p>在构造 1 维 BST 树时，一个 1 维数据根据其与树的根结点进行大小比较，来决定是划分到左子树还是右子树。<br>同理，我们也可以按照这样的方式，将一个 $k$ 维数据与 k-d树 的根结点进行比较，只不过不是对 $k$ 维数据进行整体的比较，而是选择某一个维度 $D_i$，然后比较两个数据在该维度 $D_i$ 上的大小关系，即每次选择一个维度 $D_i$ 来对 $k$ 维数据进行划分，相当于用一个垂直于该维度 $D_i$ 的超平面将 $k$ 维数据空间一分为二，平面一边的所有 $k$ 维数据在 $D_i$ 维度上的值小于平面另一边的所有 $k$ 维数据对应维度上的值。<br>也就是说，我们每选择一个维度进行如上的划分，就会将 $k$ 维数据空间划分为两个部分，如果我们继续分别对这两个子 $k$ 维空间进行如上的划分，又会得到新的子空间，对新的子空间又继续划分，重复以上过程直到每个子空间都不能再划分为止。以上就是构造 k-d树 的过程。<br>那么如果是二维特殊情况，就变得非常好理解了，通俗的来说就是通过过已有点的横线，竖线来划分二维平面。<br>上述过程中涉及到两个重要的问题：</p><ol><li>每次对子空间的划分时，怎样确定在哪个维度上进行划分？</li><li>在某个维度上进行划分时，怎样确保在这一维度上的划分得到的两个子集合的数量尽量相等，即左子树和右子树中的结点个数尽量相等？</li></ol><p>对于第一个问题，有很多种方法可以选择划分维度（axis-aligned splitting planes），所以有很多种创建 k-d树 的方法。 最典型的方法如下：<br>随着树的深度轮流选择维度来划分。例如，在二维空间中根节点以 x 轴划分，其子节点皆以 y 轴划分，其孙节点又以 x 轴划分，其曾孙节点则皆为 y 轴划分，依此类推。<br>另外的划分方法还有最大方差法（max invarince），在这里不做介绍。</p><p>而对于第二个问题，也是在 BST 中会遇到的一个问题。在 BST 中，我们是将数据的中位数作为根节点，然后再左右递归下去建树，这样可以得到一棵平衡的二叉搜索树。<br>同样，在 k-d树 中，若在维度 $D_i$ 上进行划分时，根节点就应该选择该维度 $D_i$ 上所有数据的中位数，这样递归子树的大小就基本相同了。</p></blockquote><h2 id="K-D-树单个节点"><a href="#K-D-树单个节点" class="headerlink" title="K-D 树单个节点"></a>K-D 树单个节点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="comment">//d 数组储存当前点，minn 和 maxn 表示当前节点维护的矩形的边界</span></div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line"></div><div class="line">    <span class="comment">//对节点进行初始化</span></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX];</div><div class="line"></div><div class="line"><span class="comment">//通过修改全局变量 D，实现按不同维度排序</span></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    <span class="comment">//将中间数放到 mid 位置，小于中间数的放左边，大于的放右边，不保证左右边有序，类似快排的一部分，复杂度O(N)</span></div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    <span class="comment">//初始化节点信息</span></div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="comment">//维护子树信息</span></div><div class="line">    pushUp(mid);</div><div class="line">    re</div></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> k, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="comment">//如果当前节点为空，就直接将赋值</span></div><div class="line">    <span class="keyword">if</span> (o == <span class="number">0</span>) &#123;</div><div class="line">        o = k;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//否则根据 now 维的大小进行二分查找</span></div><div class="line">    <span class="keyword">if</span> (tree[k].d[now] &lt; tree[o].d[now]) insert(tree[o].l, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">else</span> insert(tree[o].r, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="comment">//插入节点后更新信息</span></div><div class="line">    pushUp(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h2 id="最近点"><a href="#最近点" class="headerlink" title="最近点"></a>最近点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//当前查找的点距离节点维护的矩阵的最近距离</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += tree[k].d[i] - tree[o].maxn[i];</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += tree[o].minn[i] - tree[k].d[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="comment">//通过当前节点储存的点更新答案</span></div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (dm &lt; ans) ans = dm;</div><div class="line">    <span class="comment">//计算左右子树距离当前点可能的最近的答案</span></div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line"></div><div class="line">    <span class="comment">//通过搜索顺序进行剪枝</span></div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="comment">//如果最近可能的点都大于答案，那么不可能更新答案</span></div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>初始化答案为无穷，从根节点开始，首先通过节点储存的点去更新答案。然后计算左右子树维护的矩形区域离当前查询的点的最近可能距离，然后首先搜距离近的，再搜远的，实际上就是一个剪枝。复杂度一般是$O(\log n)$，最差可能是$O(n \sqrt{n})$。</p><p>上面是曼哈顿距离，对于欧式几何距离用下面计算，也就是一个点到矩形的最近距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tree[o].minn[<span class="number">2</span>] &gt; tree[k].d[<span class="number">2</span>]) <span class="keyword">return</span> INF;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += sqr(tree[k].d[i] - tree[o].maxn[i]);</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += sqr(tree[o].minn[i] - tree[k].d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>扩展成求到某个点最近的 k 个点也比较容易，查询的时候维护一个最大堆就可以了，之前的剪枝，就是对对顶进行比较了，如果大于堆顶一定不可能更新答案。</p><h1 id="题集"><a href="#题集" class="headerlink" title="题集"></a>题集</h1><h2 id="BZOJ-2648"><a href="#BZOJ-2648" class="headerlink" title="BZOJ 2648"></a>BZOJ 2648</h2><p>裸的 K-D 树题，求到某个点的最近曼哈顿距离。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">500010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX * <span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> D;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> root = <span class="number">0</span>, pos = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += tree[k].d[i] - tree[o].maxn[i];</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += tree[o].minn[i] - tree[k].d[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (dm &lt; ans) ans = dm;</div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> k, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="number">0</span>) &#123;</div><div class="line">        o = k;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (tree[k].d[now] &lt; tree[o].d[now]) insert(tree[o].l, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">else</span> insert(tree[o].r, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(o);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    n = read();</div><div class="line">    m = read();</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) tree[i].d[j] = read();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line"> </div><div class="line">    pos = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> op;</div><div class="line">    <span class="keyword">while</span> (m--) &#123;</div><div class="line">        op = read();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) tree[pos].d[j] = read();</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</div><div class="line">            tree[pos].maintain();</div><div class="line">            insert(root, pos, <span class="number">0</span>);</div><div class="line">            pos++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ans = INF;</div><div class="line">            query(root, pos);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="BZOJ-1941"><a href="#BZOJ-1941" class="headerlink" title="BZOJ 1941"></a>BZOJ 1941</h2><p>求每个点的最近点和最远的的距离差值最小的，用 K-D 树求每个点的最远点和最近点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">500010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX * <span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> D;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> root = <span class="number">0</span>, pos = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ansMin, ansMax;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += tree[k].d[i] - tree[o].maxn[i];</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += tree[o].minn[i] - tree[k].d[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMax</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        rst += max(<span class="built_in">abs</span>(tree[k].d[i] - tree[o].minn[i]), <span class="built_in">abs</span>(tree[k].d[i] - tree[o].maxn[i]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (o == k) dm = INF;</div><div class="line">    <span class="keyword">if</span> (dm &lt; ansMin) ansMin = dm;</div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt; ansMin) queryMin(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt; ansMin) queryMin(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt; ansMin) queryMin(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt; ansMin) queryMin(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (dm &gt; ansMax) ansMax = dm;</div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMax(tree[o].l, k) : <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMax(tree[o].r, k) : <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (dl &gt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &gt; ansMax) queryMax(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &gt; ansMax) queryMax(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &gt; ansMax) queryMax(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &gt; ansMax) queryMax(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;tree[i].d[<span class="number">0</span>], &amp;tree[i].d[<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            ansMax = <span class="number">0</span>;</div><div class="line">            ansMin = INF;</div><div class="line">            queryMax(root, i);</div><div class="line">            queryMin(root, i);</div><div class="line">            ans = min(ans, ansMax - ansMin);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="BZOJ-4066"><a href="#BZOJ-4066" class="headerlink" title="BZOJ 4066"></a>BZOJ 4066</h2><p>给出一个$n \times n$的棋盘，每次对其中的一个点修改中，询问一个矩形，求矩形内点的和。</p><p>这里插入的点的数量有点多，可能导致树的形态太差，所以插入点树每过 10000 就暴力重构一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line">    <span class="keyword">int</span> sum, v;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        sum = v;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX * <span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> D;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> root = <span class="number">0</span>, pos = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    tree[p].sum = tree[son[<span class="number">0</span>]].sum + tree[p].v + tree[son[<span class="number">1</span>]].sum;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"><span class="keyword">int</span> xl, xr, yl, yr;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xr &lt; tree[o].minn[<span class="number">0</span>] || tree[o].maxn[<span class="number">0</span>] &lt; xl  ||</div><div class="line">        yr &lt; tree[o].minn[<span class="number">1</span>] || tree[o].maxn[<span class="number">1</span>] &lt; yl)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (xl &lt;= tree[o].minn[<span class="number">0</span>] &amp;&amp; tree[o].maxn[<span class="number">0</span>] &lt;= xr &amp;&amp;</div><div class="line">        yl &lt;= tree[o].minn[<span class="number">1</span>] &amp;&amp; tree[o].maxn[<span class="number">1</span>] &lt;= yr) &#123;</div><div class="line">        ans += tree[o].sum;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (xl &lt;= tree[o].d[<span class="number">0</span>] &amp;&amp; tree[o].d[<span class="number">0</span>] &lt;= xr &amp;&amp;</div><div class="line">        yl &lt;= tree[o].d[<span class="number">1</span>] &amp;&amp; tree[o].d[<span class="number">1</span>] &lt;= yr)</div><div class="line">        ans += tree[o].v;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (tree[o].l) query(tree[o].l);</div><div class="line">    <span class="keyword">if</span> (tree[o].r) query(tree[o].r);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> k, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="number">0</span>) &#123;</div><div class="line">        o = k;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (tree[k].d[now] &lt; tree[o].d[now]) insert(tree[o].l, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">else</span> insert(tree[o].r, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(o);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">bool</span> type = <span class="literal">true</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">if</span> (type) t ^= ans;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> op;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        op = read(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">3</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) tree[pos].d[j] = read();</div><div class="line">            tree[pos].v = read();</div><div class="line">            tree[pos].maintain();</div><div class="line">            insert(root, pos, <span class="number">0</span>);</div><div class="line">            pos++;</div><div class="line">            <span class="keyword">if</span> (pos % <span class="number">10000</span> == <span class="number">0</span>) root = build(<span class="number">1</span>, pos - <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            xl = read();</div><div class="line">            yl = read();</div><div class="line">            xr = read();</div><div class="line">            yr = read();</div><div class="line"> </div><div class="line">            ans = <span class="number">0</span>;</div><div class="line">            query(root);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="HDU-5992"><a href="#HDU-5992" class="headerlink" title="HDU 5992"></a>HDU 5992</h2><p>三维 K-D 树，求二维平面是距离某个点最近的点，并且第三维不超过某个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">3</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line">&#125; tree[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> D;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) tree[mid].maxn[i] = tree[mid].minn[i] = tree[mid].d[i];</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(<span class="keyword">const</span> ll &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sqr((ll) a.d[<span class="number">0</span>] - (ll) b.d[<span class="number">0</span>]) + sqr((ll) a.d[<span class="number">1</span>] - (ll) b.d[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tree[o].minn[<span class="number">2</span>] &gt; tree[k].d[<span class="number">2</span>]) <span class="keyword">return</span> INF;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += sqr(tree[k].d[i] - tree[o].maxn[i]);</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += sqr(tree[o].minn[i] - tree[k].d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ll ans1;</div><div class="line"><span class="keyword">int</span> ans2, ansNode;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll dm = dis(tree[o], tree[k]);</div><div class="line">    <span class="keyword">if</span> (tree[o].d[<span class="number">2</span>] &lt;= tree[k].d[<span class="number">2</span>] &amp;&amp; (dm &lt; ans1 || dm == ans1 &amp;&amp; tree[o].id &lt; ans2)) &#123;</div><div class="line">        ans1 = dm;</div><div class="line">        ans2 = tree[o].id;</div><div class="line">        ansNode = o;</div><div class="line">    &#125;</div><div class="line">    ll dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    ll dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt;= ans1) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt;= ans1) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt;= ans1) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt;= ans1) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n, m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[i].d[j]);</div><div class="line">            tree[i].l = tree[i].r = <span class="number">0</span>;</div><div class="line">            tree[i].id = i;</div><div class="line">        &#125;</div><div class="line">        root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[n + <span class="number">1</span>].d[j]);</div><div class="line">            ans1 = INF;</div><div class="line">            query(root, n + <span class="number">1</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, tree[ansNode].d[<span class="number">0</span>], tree[ansNode].d[<span class="number">1</span>], tree[ansNode].d[<span class="number">2</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="HDU-4347"><a href="#HDU-4347" class="headerlink" title="HDU 4347"></a>HDU 4347</h2><p>求 k 维的最近 m 个点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">50000</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXDIM = <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> DIM;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> d[MAXDIM], minn[MAXDIM], maxn[MAXDIM];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> D;</div><div class="line">priority_queue&lt;pair&lt;ll, <span class="keyword">int</span>&gt; &gt; q;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(<span class="keyword">const</span> ll &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span> </span>&#123;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        rst += sqr((ll) a.d[i] - (ll) b.d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>  rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += sqr(tree[k].d[i] - tree[o].maxn[i]);</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += sqr(tree[o].minn[i] - tree[k].d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll dm = dis(tree[o], tree[k]);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (dm &lt; q.top().first) &#123;</div><div class="line">        q.pop();</div><div class="line">        q.push(make_pair(dm, o));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ll dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    ll dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt;= q.top().first) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt;= q.top().first) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt;= q.top().first) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt;= q.top().first) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;DIM)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[i].d[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> t, m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        <span class="keyword">while</span> (t--) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[n + <span class="number">1</span>].d[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">            <span class="keyword">while</span> (!q.empty()) q.pop();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) q.push(make_pair(INF, <span class="number">-1</span>));</div><div class="line">            query(root, n + <span class="number">1</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">            <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">                ans.push_back(q.top().second);</div><div class="line">                q.pop();</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"the closest %d points are:\n"</span>, m);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ans.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, tree[ans[i]].d[j], j == DIM - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/20/K-D%E6%A0%91%E5%B0%8F%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SDUTOJ4079 - Cirno のさんすう教室(模拟)</title>
      <link>https://li-fish.github.io/2017/11/20/SDUTOJ4079-Cirno-%E3%81%AE%E3%81%95%E3%82%93%E3%81%99%E3%81%86%E6%95%99%E5%AE%A4-%E6%A8%A1%E6%8B%9F/</link>
      <guid>https://li-fish.github.io/2017/11/20/SDUTOJ4079-Cirno-%E3%81%AE%E3%81%95%E3%82%93%E3%81%99%E3%81%86%E6%95%99%E5%AE%A4-%E6%A8%A1%E6%8B%9F/</guid>
      <pubDate>Mon, 20 Nov 2017 04:32:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.sdut.edu.cn/onlinejudge2/index.php/Hom
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Contest/contestproblem/cid/2326/pid/4079" target="_blank" rel="external">http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Contest/contestproblem/cid/2326/pid/4079</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出若干个类似 “A + B = C” 的等式（ABC均为一位的正整数），其中每个等式有可能至多有一个位置为 “?”，运算符只有”+ - *”。</p><p>题目需要输出每个复原后的等式，有可能等式本来就不需要复原，保证问号也为一位的正整数。</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>不难发现每个问号都有一个唯一的解，然后就是一道小学的算术题了。</p><p>分情况判断：</p><ul><li>? + B = C，那么 ? = C - B</li><li>A * ? = C，那么 ? = C / A</li><li>以此类推….</li></ul><p>这里可能好多同学读字符的时候出了问题，这里说一下，scanf函数里面添加一个空白字符，在读取的时候可以忽略掉若干个空白字符，比如我scanf(“ %c”, &amp;ch)，就可以读取 “  1”，前者有一个空格，后者两个。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">while</span> (n--) &#123;</div><div class="line">        <span class="keyword">char</span> a, b, c, d, e;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">" %c %c %c %c %c"</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e);</div><div class="line">        a -= <span class="string">'0'</span>, c -= <span class="string">'0'</span>, e -= <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">if</span> (b == <span class="string">'+'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (a == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                a = e - c;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                c = e - a;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                e = a + c;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="string">'-'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (a == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                a = e + c;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                c = a - e;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                e = a - c;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (a == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                a = e / c;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                c = e / a;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                e = a * c;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c %c %c %c %c\n"</span>, a + <span class="string">'0'</span>, b, c + <span class="string">'0'</span>, d, e + <span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/20/SDUTOJ4079-Cirno-%E3%81%AE%E3%81%95%E3%82%93%E3%81%99%E3%81%86%E6%95%99%E5%AE%A4-%E6%A8%A1%E6%8B%9F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SDUTOJ4071 - 绿博的帽子（前缀和）</title>
      <link>https://li-fish.github.io/2017/11/20/SDUTOJ4071-%E7%BB%BF%E5%8D%9A%E7%9A%84%E5%B8%BD%E5%AD%90%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/11/20/SDUTOJ4071-%E7%BB%BF%E5%8D%9A%E7%9A%84%E5%B8%BD%E5%AD%90%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</guid>
      <pubDate>Mon, 20 Nov 2017 04:21:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.sdut.edu.cn/onlinejudge2/index.php/Hom
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/4071.html" target="_blank" rel="external">http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/4071.html</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出 n 个数 $a_1, a_2, a_3 \dots a<em>n$，进行 q 次询问，每次输出 $\sum</em>{k = l}^r a_k$。</p><p>$1 \le n, m, l, r \le 100000, l \le r \le n$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>题意很简单，但是如果直接用 for 循环去求 l 到 r 的和的话会超时，可以计算一下，最多有 100000 次询问，每次最差计算 100000 次，这样总共时间复杂度是 $10^{10}$，计算机一秒大概只能计算$10^{9}$次，所以肯定会超时。</p><p>这时候我们定义$S<em>i = \sum</em>{k=1}^i a_k$，这样我们可以用一个 for 循环求出所有的 Si，这样对于每一个 l, r 的询问，我们用 $S<em>r - S</em>{l - 1}$即是答案，这样总共的时间复杂度是 $10^5$。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">112345</span>;</div><div class="line"><span class="keyword">int</span> S[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, S + i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            S[i] += S[i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span> (q--) &#123;</div><div class="line">            <span class="keyword">int</span> l, r;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, S[r] - S[l - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/20/SDUTOJ4071-%E7%BB%BF%E5%8D%9A%E7%9A%84%E5%B8%BD%E5%AD%90%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ICPC青岛站总结</title>
      <link>https://li-fish.github.io/2017/11/09/ICPC%E9%9D%92%E5%B2%9B%E7%AB%99%E6%80%BB%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/11/09/ICPC%E9%9D%92%E5%B2%9B%E7%AB%99%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Thu, 09 Nov 2017 06:38:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;老师要求每场比赛后要写一份总结…有点小学的时候强行每天写日记的感觉了。于是看看能不能写出点东西，就放在博客上了。&lt;/p&gt;
&lt;h1 id=&quot;经
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>老师要求每场比赛后要写一份总结…有点小学的时候强行每天写日记的感觉了。于是看看能不能写出点东西，就放在博客上了。</p><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>总的来说体验一般吧，不论是坐车还是吃饭什么的，没有去哈尔滨或者杭州那么遥远的感觉，毕竟还没出省，（然后没有比赛的感觉？）。感觉两天时间一会就过去了，仿佛还没打比赛。然后到现在去青岛的经历都记不太清了…</p><h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><p>热身赛的时候还是打算先练练手了，最后排名好像是在银牌区，算是认真打了下。最后在想 C 题，突然奇想用线段树的维护信息方式去写字典树，然后好像就可以做了，不过到比赛结束还没有调出来有点可惜，回来的后补掉了一个类似的题。</p><p>正式赛惯例还是我来敲签到题，这两场的发挥还算正常，做完签到题能够在银牌区，不过出打印图形的题的时候算是失误了一下，出的比较慢，当时好像在 90 名左右。之后就去看那个字符串题了，按照后缀数组的暴力做法让队友敲了一个半小时才调过了样例，然后我试了下造的大数据，发现 1000 的数据两就差不多 TLE 了，然后就交，这时候我一直在想简单的算法，感觉 A 的人那么多，不可能这么多队都会后缀数组，然后写了一个最差情况下可能 T 的算法，交上去就 A 了。这时候排名 50 左右，银牌是肯定稳了，毕竟一个小时不可能滚上去 50 多个队。最后一小时读了一个题，然后一点思路都没有，最后一个小时算是很绝望了…</p><h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>这场比赛感觉题出的是真的不好，前三题是一点难度都没有，只要手速快点，胆子大点就莫名其妙的前 100 名了，这样随随便便就拿到的名次感觉都对不起平时的训练。不过有银牌还是非常开心的，自我评价我们队的水平也就是介于铜牌和银牌之间。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/09/ICPC%E9%9D%92%E5%B2%9B%E7%AB%99%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>51nod1378 - 夹克老爷的愤怒（树型DP+贪心）</title>
      <link>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/</guid>
      <pubDate>Tue, 31 Oct 2017 12:51:52 GMT</pubDate>
>>>>>>> ced470192faae13e215fb3b57e28efad2f01fa7f
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://vj.bit-studio.cn/problem/UVALive-4885&quot; tar
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://vj.bit-studio.cn/problem/UVALive-4885" target="_blank" rel="external">题目链接</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出 N 个任务，M 个约束条件，条件有两种类型。</p><p>A 任务要在 B 之后至少 C 分钟后执行。</p><p>A 任务要在 B 之后至多 C 分钟内执行。</p><p>满足约束条件即可，不用不同任务可以在同一分钟执行。</p><p>$1 \le N \le 100$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>假设 $F(A)$ 为 A 任务执行的时间，那么对于上面两个条件可以化为：</p><p>$F(A) - F(B) \ge C$</p><p>$F(A) - F(B) \le C$</p><p>$F(A) \ge F(B) $</p><p>注意这里对第二个约束条件，要转化为两个不等式，如果只有一个等式的话，不能保证<br>A 任务的执行在 B 任务之后。</p><p>由于题目要求执行的时间不能超过 $10^6$，那么这里对没一个对所有的 i j 加一个条件:</p><p>$F(i) - F(j) \le 10^6 - 1$ ，这样同时使得图连通。</p><p>最后将上述条件转化为对应的边跑最短路或者最长路即可。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> op[MAX];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, w, nxt;</div><div class="line">&#125; edge[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAX], etot;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    edge[etot].v = v;</div><div class="line">    edge[etot].w = w;</div><div class="line">    edge[etot].nxt = head[u];</div><div class="line">    head[u] = etot++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dist[MAX], num[MAX];</div><div class="line"><span class="keyword">bool</span> vis[MAX];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dist, INF, <span class="keyword">sizeof</span>(dist));</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(<span class="number">1</span>);</div><div class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">    dist[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        vis[u] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">            <span class="keyword">int</span> v = edge[i].v;</div><div class="line">            <span class="keyword">int</span> w = edge[i].w;</div><div class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + w) &#123;</div><div class="line">                dist[v] = dist[u] + w;</div><div class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</div><div class="line">                    num[v]++;</div><div class="line">                    <span class="keyword">if</span> (num[v] &gt; n + <span class="number">10</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                    q.push(v);</div><div class="line">                    vis[v] = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">        etot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%*s %d %*s %s"</span>, &amp;u, op);</div><div class="line">            <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">'a'</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%*s %d %*s %*s %*s %*s %d"</span>, &amp;w, &amp;v);</div><div class="line">                add_edge(u, v, -w);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %*s %*s %*s %*s %*s %*s %*s %d"</span>, &amp;w, &amp;v);</div><div class="line">                add_edge(v, u, w);</div><div class="line">                add_edge(u, v, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">                add_edge(j, i, <span class="number">1000000</span> - <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!spfa()) <span class="built_in">puts</span>(<span class="string">"Impossible."</span>);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> minn = INF;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">                minn = min(minn, dist[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, dist[i] - minn + <span class="number">1</span>, i == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>漏掉了第二个约束条件要转化为两个不等式，ORZ</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2018/01/22/UVA4885-Task%EF%BC%88%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SDUTACM分组测试赛题解</title>
      <link>https://li-fish.github.io/2018/01/18/SDUTACM%E5%88%86%E7%BB%84%E6%B5%8B%E8%AF%95%E8%B5%9B%E9%A2%98%E8%A7%A3/</link>
      <guid>https://li-fish.github.io/2018/01/18/SDUTACM%E5%88%86%E7%BB%84%E6%B5%8B%E8%AF%95%E8%B5%9B%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Thu, 18 Jan 2018 10:38:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;A-China-Final&quot;&gt;&lt;a href=&quot;#A-China-Final&quot; class=&quot;headerlink&quot; title=&quot;A - China Final&quot;&gt;&lt;/a&gt;A - China Final&lt;/h1&gt;&lt;p&gt;简单的模拟计算 ACM-ICPC 的排名。&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="A-China-Final"><a href="#A-China-Final" class="headerlink" title="A - China Final"></a>A - China Final</h1><p>简单的模拟计算 ACM-ICPC 的排名。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,n/<span class="number">10</span>,n/<span class="number">10</span>*<span class="number">3</span>,n/<span class="number">10</span>*<span class="number">6</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="B-为了相同的前缀-跳楼梯"><a href="#B-为了相同的前缀-跳楼梯" class="headerlink" title="B - 为了相同的前缀-跳楼梯"></a>B - 为了相同的前缀-跳楼梯</h1><p>判断一下是否有两个或多个相邻的台阶同时脏了，或者第 100 个台阶是否脏了即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 200</span></div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, data + i);</div><div class="line">            <span class="keyword">if</span> (data[i] == <span class="number">100</span>) flag = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - i + <span class="number">1</span>; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (data[j] &gt; data[j + <span class="number">1</span>]) &#123;</div><div class="line">                    <span class="keyword">int</span> t = data[j + <span class="number">1</span>];</div><div class="line">                    data[j + <span class="number">1</span>] = data[j];</div><div class="line">                    data[j] = t;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &gt; <span class="number">100</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span> (data[i] - data[i - <span class="number">1</span>] == <span class="number">1</span>) flag = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">"Orz\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Why are you so ben?\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="C-完美区间"><a href="#C-完美区间" class="headerlink" title="C - 完美区间"></a>C - 完美区间</h1><p>写好判断素数的函数，然后跑一个 for 循环即可，注意 0 和 1 不是素数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r)) &#123;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (is_prime(i)) cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (is_prime(cnt)) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D-2017-666"><a href="#D-2017-666" class="headerlink" title="D - 2017 666!"></a>D - 2017 666!</h1><p>直接当做字符串读入即可，然后 if 判断有几个 2017 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> data[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, data)) &#123;</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(data);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">3</span> &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] == <span class="string">'2'</span> &amp;&amp;</div><div class="line">                data[i + <span class="number">1</span>] == <span class="string">'0'</span> &amp;&amp;</div><div class="line">                data[i + <span class="number">2</span>] == <span class="string">'1'</span> &amp;&amp;</div><div class="line">                data[i + <span class="number">3</span>] == <span class="string">'7'</span>)</div><div class="line">                ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (ans--) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"666"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E-场地安排"><a href="#E-场地安排" class="headerlink" title="E - 场地安排"></a>E - 场地安排</h1><p>可以先把数组初始化为 -1，并且最小的下标从  (1, 1) 开始，那么就不需要特判边界了。</p><p>对于每个位置的相邻位置可以把增量算出来存到数组里面，比如当前位置是第 i 行第 j 列，那么这个的左上角就是 (i - 1, j - 1)，记录增量 (-1, -1)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 112</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> data[MAX][MAX];</div><div class="line"><span class="keyword">int</span> dirc[<span class="number">8</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        <span class="built_in">memset</span>(data, <span class="number">-1</span>, <span class="keyword">sizeof</span>(data));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++) &#123;</div><div class="line">                    <span class="keyword">int</span> tx = i + dirc[k][<span class="number">0</span>];</div><div class="line">                    <span class="keyword">int</span> ty = j + dirc[k][<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span> (data[tx][ty] == data[i][j]) flag = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">"\\(^o^)/~\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Oh~no!!!\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="F-及格名单"><a href="#F-及格名单" class="headerlink" title="F - 及格名单"></a>F - 及格名单</h1><p>将名字和成绩用数组存起来，最后输入及格线，然后在 for 循环一遍数组，如果及格就输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> name[<span class="number">101</span>][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> score[<span class="number">101</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> t;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, name[i], score + i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> bound;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bound);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (score[i] &gt;= bound) <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, name[i], score[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="G-小鑫与斐波那契（二）"><a href="#G-小鑫与斐波那契（二）" class="headerlink" title="G - 小鑫与斐波那契（二）"></a>G - 小鑫与斐波那契（二）</h1><p>有个定理$(a + b) \mod p = (a \mod p + b \mod p) \mod p$。</p><p>然后计算过程中可能会有的项超出 long long 的范围。根据上面的定理显然可以知道总结取膜对结果无影响，然后 for 循环计算即可。</p><p>注意直接用函数递归一定会超时，因为计算量几乎是按指数递增的，可以简单的画图看一下，有很多项被重复计算了多次。</p><p><img src="http://chuantu.biz/t6/209/1516275572x-1404793130.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000123</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></div><div class="line"></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> fib[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    fib[<span class="number">0</span>] = <span class="number">0</span>, fib[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</div><div class="line">        fib[i] = (fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>]) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, fib[n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="H-今年暑假不AC"><a href="#H-今年暑假不AC" class="headerlink" title="H - 今年暑假不AC"></a>H - 今年暑假不AC</h1><p>贪心的经典例题，按每个时间段的右边界排序，然后贪心的尽可能的选就可以了。</p><p>（如果不会的话可以等到贪心的专题，肯定会有学长 or 老师讲这道题）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 112</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">&#125; data[MAX], t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;data[i].l, &amp;data[i].r);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - i + <span class="number">1</span>; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (data[j].r &gt; data[j + <span class="number">1</span>].r) &#123;</div><div class="line">                    t = data[j + <span class="number">1</span>];</div><div class="line">                    data[j + <span class="number">1</span>] = data[j];</div><div class="line">                    data[j] = t;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>, cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (pos &lt;= data[i].l) pos = data[i].r, cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="I-数字矩阵"><a href="#I-数字矩阵" class="headerlink" title="I - 数字矩阵"></a>I - 数字矩阵</h1><p>设 $dp[i][j]$ 为走到 $dp[i][j]$ 的最大累加和，$data[i][j]$ 为 i 行 j 列的值，那么从左上到右下有：</p><p>$$dp[i][j] = \max(dp[i - 1][j], dp[i][j -1]) + data[i]$$</p><p>对于右上到左下有：</p><p>$$dp[i][j] = \max(dp[i - 1][j], dp[i][j + 1]) + data[i]$$</p><p>这里虽然有四个起始位置，但是有两个是重复的只是起点和终点交换了，跑两次 DP 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 200</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[MAX][MAX], b[MAX][MAX], c[MAX][MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</div><div class="line">                b[i][j] = a[i][j] + max(b[i - <span class="number">1</span>][j], b[i][j - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--) &#123;</div><div class="line">                c[i][j] = a[i][j] + max(c[i - <span class="number">1</span>][j], c[i][j + <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(b[n][m], c[n][<span class="number">1</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2018/01/18/SDUTACM%E5%88%86%E7%BB%84%E6%B5%8B%E8%AF%95%E8%B5%9B%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2017级《程序设计基础(B)I》期末上机考试 题解（Fish出题部分）</title>
      <link>https://li-fish.github.io/2018/01/04/2017%E7%BA%A7%E3%80%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-B-I%E3%80%8B%E6%9C%9F%E6%9C%AB%E4%B8%8A%E6%9C%BA%E8%80%83%E8%AF%95-%E9%A2%98%E8%A7%A3%EF%BC%88Fish%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2018/01/04/2017%E7%BA%A7%E3%80%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-B-I%E3%80%8B%E6%9C%9F%E6%9C%AB%E4%B8%8A%E6%9C%BA%E8%80%83%E8%AF%95-%E9%A2%98%E8%A7%A3%EF%BC%88Fish%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86%EF%BC%89/</guid>
      <pubDate>Thu, 04 Jan 2018 11:06:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;喵帕斯之喵帕斯！&quot;&gt;&lt;a href=&quot;#喵帕斯之喵帕斯！&quot; class=&quot;headerlink&quot; title=&quot;喵帕斯之喵帕斯！&quot;&gt;&lt;/a&gt;喵帕斯之喵帕斯！&lt;/h1&gt;&lt;p&gt;简单的输入输出。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;ta
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="喵帕斯之喵帕斯！"><a href="#喵帕斯之喵帕斯！" class="headerlink" title="喵帕斯之喵帕斯！"></a>喵帕斯之喵帕斯！</h1><p>简单的输入输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"ohayou"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"nyanpasu"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="喵帕斯之副食店"><a href="#喵帕斯之副食店" class="headerlink" title="喵帕斯之副食店"></a>喵帕斯之副食店</h1><p>计算所有硬币的面额和然后除以P即可，如果大于K的话输出K。</p><p>$\min((\sum_{i = 1}^n a[i] \cdot b[i])/P, K)$就是答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, k, p;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;k, &amp;p)) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> a, b;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</div><div class="line">            sum += a * b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = sum / p;</div><div class="line">        <span class="keyword">if</span> (ans &gt; k) ans = k;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="喵帕斯之天才算数少女"><a href="#喵帕斯之天才算数少女" class="headerlink" title="喵帕斯之天才算数少女"></a>喵帕斯之天才算数少女</h1><p>考察函数的递归应用，根据题意写出代码即可。</p><p>（其实这个函数是理论计算机科学里非常重要的一个函数，阿克曼函数）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; n == <span class="number">0</span>) <span class="keyword">return</span> fun(m - <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fun(m - <span class="number">1</span>, fun(m, n - <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> m, n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fun(m, n));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="喵帕斯之传说中的神剑"><a href="#喵帕斯之传说中的神剑" class="headerlink" title="喵帕斯之传说中的神剑"></a>喵帕斯之传说中的神剑</h1><p><img src="http://imgsrc.baidu.com/forum/pic/item/9178281f95cad1c8a2e3cbea7a3e6709c83d515c.jpg" alt=""></p><p>其实喵帕斯参加过圣杯战争！（雾</p><p>这个题就是一个简单的打印图形，没什么难点，对比打印金字塔和菱形简单多了。注意点格式不要PE就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i == a / <span class="number">3</span> * <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; i++) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"#"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b / <span class="number">2</span>; i++) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"#"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="喵帕斯之数学难题"><a href="#喵帕斯之数学难题" class="headerlink" title="喵帕斯之数学难题"></a>喵帕斯之数学难题</h1><p>考察拆分整数和素数判断，其实直接读字符串也可以。推荐写个判断是否伟素数的函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (n) &#123;</div><div class="line">            sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</div><div class="line">            n /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (is_prime(sum)) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="喵帕斯之平地摔"><a href="#喵帕斯之平地摔" class="headerlink" title="喵帕斯之平地摔"></a>喵帕斯之平地摔</h1><p>简单的一位数组，判断下是否大于相邻的两个位置即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 233</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, data + i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &gt; data[i - <span class="number">1</span>] &amp;&amp; data[i] &gt; data[i + <span class="number">1</span>]) ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="喵帕斯之短笛"><a href="#喵帕斯之短笛" class="headerlink" title="喵帕斯之短笛"></a>喵帕斯之短笛</h1><p>考察字符串比较，注意最后一个数后面没有空格。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> str[][<span class="number">3</span>] = &#123;<span class="string">"do"</span>, <span class="string">"re"</span>, <span class="string">"mi"</span>, <span class="string">"fa"</span>, <span class="string">"so"</span>, <span class="string">"la"</span>, <span class="string">"xi"</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> data[<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">strcmp</span>(data, str[pos]) != <span class="number">0</span>) pos++;</div><div class="line">    <span class="keyword">return</span> pos + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, data);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, find(), i == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="喵帕斯之矩阵"><a href="#喵帕斯之矩阵" class="headerlink" title="喵帕斯之矩阵"></a>喵帕斯之矩阵</h1><p>算是最难的题了，考察排序和二维数组，排序的时候需要找一下下标之间的关系。</p><p>这道题可以有多个做法，这里推荐一下郑康的做法。</p><p>让每个位置的数和他右下角的去比较，因为最长的对角线最长为 N，跑 N - 1 趟就OK。</p><p>大家可以类比下冒泡去理解一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 112</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> data[MAX][MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">                    <span class="keyword">if</span> (data[i][j] &gt; data[i + <span class="number">1</span>][j + <span class="number">1</span>]) &#123;</div><div class="line">                        <span class="keyword">int</span> t = data[i][j];</div><div class="line">                        data[i][j] = data[i + <span class="number">1</span>][j + <span class="number">1</span>];</div><div class="line">                        data[i + <span class="number">1</span>][j + <span class="number">1</span>] = t;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, data[i][j], j == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2018/01/04/2017%E7%BA%A7%E3%80%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80-B-I%E3%80%8B%E6%9C%9F%E6%9C%AB%E4%B8%8A%E6%9C%BA%E8%80%83%E8%AF%95-%E9%A2%98%E8%A7%A3%EF%BC%88Fish%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SDUT第七届ACM趣味循环赛题解（Fish出题部分）</title>
      <link>https://li-fish.github.io/2017/12/27/SDUT%E7%AC%AC%E4%B8%83%E5%B1%8AACM%E8%B6%A3%E5%91%B3%E5%BE%AA%E7%8E%AF%E8%B5%9B%E9%A2%98%E8%A7%A3%EF%BC%88Fish%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/12/27/SDUT%E7%AC%AC%E4%B8%83%E5%B1%8AACM%E8%B6%A3%E5%91%B3%E5%BE%AA%E7%8E%AF%E8%B5%9B%E9%A2%98%E8%A7%A3%EF%BC%88Fish%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86%EF%BC%89/</guid>
      <pubDate>Wed, 27 Dec 2017 07:42:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;yxc-的日常&quot;&gt;&lt;a href=&quot;#yxc-的日常&quot; class=&quot;headerlink&quot; title=&quot;yxc 的日常&quot;&gt;&lt;/a&gt;yxc 的日常&lt;/h1&gt;&lt;p&gt;非常简单的一道题。输入 N 个数，求和判断是否大于等于 25 即可。由于题意，数据的和保证不会超过 
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="yxc-的日常"><a href="#yxc-的日常" class="headerlink" title="yxc 的日常"></a>yxc 的日常</h1><p>非常简单的一道题。输入 N 个数，求和判断是否大于等于 25 即可。由于题意，数据的和保证不会超过 24，所以对每一组数据直接输出 NO 也可以 AC。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,n,a,r=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">    &#123;</div><div class="line">        r=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</div><div class="line">            r+=a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(r&gt;=<span class="number">25</span>)<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="金泽的地图"><a href="#金泽的地图" class="headerlink" title="金泽的地图"></a>金泽的地图</h1><p>这个题数据量非常大，有两种操作，一种 L 到 R 区间每个位置加 V，一种是询问 L 到 R 的和，操作次数不会超过 $10^5$，保证全部增加完再询问。</p><p>$1 \le L \le R \le 10^5$，对于每个增加或询问操作直接 for 循环去跑肯定会 TLE，由之前<a href="http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/4071.html" target="_blank" rel="external">绿博的帽子</a>那个题可以知道对于询问我们可以用前缀和去预处理一下，然后每次询问都直接计算出来。</p><p>但是对于增加操作，我们也需要进行优化，我们这样处理：</p><p>首先定义一个初始值为 0 的数组 data</p><p>对于每一个 L 到 R 区间增加 V 的操作，让 <code>data[L] += v</code>，<code>data[R + 1] -= v</code>。</p><p>然后定义函数 $F(i) = \sum_1^idata[i]$，可以证明$F[i]$的值就是第 i 个位置进行所有增加的操作后最终的数值。</p><p>证明如下：</p><p>如果一次操作是 [L, R] 区间每个位置增加 V，那么我们实际进行的是 <code>data[L] += v</code>，<code>data[R + 1] -= v</code>。</p><p>对于位置 i，如果一次操作的区间 $L \le R &lt; i$ 的话，即修改的区间的右端点小于 i 位置没有交集，那么 $\sum_1^i data[i]$ 中肯定同时包含了 data[L] 和 data[R + 1] 这两个值，然后对于这一次操作对$F(i)$的贡献为 $-v + v = 0$，是对$F(i)$的值无影响的。</p><p>如果一次操作的区间 $i &lt; L \le R$ 的话，$\sum_1^idata[i]$，肯定不包含 data[L] 和data[R + 1] 这两个值，所以这次修改操作对$F(i)$的值无影响。</p><p>最后对于 $L \le i \le R$ 的区间，即 i 含于区间内，$\sum_1^i$ 肯定包含了 data[L] 但不包含 data[R + 1]，假设这次是增加 V，那么我们让<code>data[L] += v</code>，<code>data[R + 1] -= v</code>就让$F(i)$的值增加了 V，这正符合这个函数的定义。</p><p>最后我们对于每一个 L 到 R 区间增加 V 的操作，让 <code>data[L] += v</code>，<code>data[R + 1] -= v</code>。</p><p>定义 $F(i) = \sum_1^idata[i]$，$G(i) = \sum_1^iF(i)$</p><p>最后对于每次询问 L 到 R 的和，$G(R) - G(L - 1)$ 就是答案。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, i, r, l, x;</div><div class="line">LL s[<span class="number">200000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;x);</div><div class="line">            s[l] += x;</div><div class="line">            s[r + <span class="number">1</span>] += (-x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) s[i] += s[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) s[i] += s[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, s[r] - s[l - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="lxw-AK"><a href="#lxw-AK" class="headerlink" title="lxw AK"></a>lxw AK</h1><p>这题没什么难点，为了让大家了解一下 ACM-ICPC 比赛的罚时机制，按题意模拟即可。</p><p>关键是理解题意，AC 一道题后不增加罚时，一道题没有 AC 不计算罚时等。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> AC[MAX];</div><div class="line"><span class="keyword">int</span> num[MAX];</div><div class="line"></div><div class="line"><span class="keyword">char</span> pid, rst[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n, m;</div><div class="line">        <span class="built_in">memset</span>(AC, <span class="number">0</span>, <span class="keyword">sizeof</span>(AC));</div><div class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">" %c %s %d"</span>, &amp;pid, rst, &amp;t);</div><div class="line">            pid -= <span class="string">'A'</span>;</div><div class="line">            <span class="keyword">if</span> (!AC[pid]) &#123;</div><div class="line">                <span class="keyword">if</span> (rst[<span class="number">0</span>] == <span class="string">'A'</span>) &#123;</div><div class="line">                    sum += t + num[pid] * <span class="number">20</span>;</div><div class="line">                    AC[pid] = <span class="number">1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    num[pid]++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="怪盗的谜题"><a href="#怪盗的谜题" class="headerlink" title="怪盗的谜题"></a>怪盗的谜题</h1><p>这个题主要考察下将数字转化为字符串，并且判断字符串的回文。最后答案要预处理一下前缀和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000 + 100</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"><span class="keyword">int</span> num[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x) &#123;</div><div class="line">        num[top++] = x % <span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = top - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</div><div class="line">        <span class="keyword">if</span> (num[l] != num[r]) flag = <span class="number">0</span>;</div><div class="line">        l++, r--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> rst1 = <span class="number">0</span>, rst2 = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; i++) &#123;</div><div class="line">        rst1 += num[i];</div><div class="line">        rst2 *= num[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag ? rst2 : rst1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</div><div class="line">        data[i] += data[i - <span class="number">1</span>] + get(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> QAQ;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;QAQ);</div><div class="line">    <span class="keyword">while</span> (QAQ--) &#123;</div><div class="line">        <span class="keyword">int</span> l, r;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, data[r] - data[l - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/12/27/SDUT%E7%AC%AC%E4%B8%83%E5%B1%8AACM%E8%B6%A3%E5%91%B3%E5%BE%AA%E7%8E%AF%E8%B5%9B%E9%A2%98%E8%A7%A3%EF%BC%88Fish%E5%87%BA%E9%A2%98%E9%83%A8%E5%88%86%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2017赛季小结</title>
      <link>https://li-fish.github.io/2017/12/20/2017%E8%B5%9B%E5%AD%A3%E5%B0%8F%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/12/20/2017%E8%B5%9B%E5%AD%A3%E5%B0%8F%E7%BB%93/</guid>
      <pubDate>Wed, 20 Dec 2017 02:49:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今年的区域赛算是完全结束了，作为第一次参加区域赛，感觉难度比预期的简单一些，当然是暑假的时候的预期。老师也算是给了我们很多的机会，总共参加了
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今年的区域赛算是完全结束了，作为第一次参加区域赛，感觉难度比预期的简单一些，当然是暑假的时候的预期。老师也算是给了我们很多的机会，总共参加了五场区域赛，包括 CCPC 秦皇岛站，哈尔滨站，ICPC 青岛站，加上 CCPC Final 和 ECL final。这么多场比赛下来也算是意识到了自己有多菜，一直以为自己有个弱银的水平，结果打了四块铜，唯一一块银还多亏了青岛的 doc 老师出题。</p><h1 id="比赛经历"><a href="#比赛经历" class="headerlink" title="比赛经历"></a>比赛经历</h1><p>第一场去的是哈尔滨，住了三晚上体验还行，热身赛随便打打的，只切了几个水题，然后热身赛状态算是最爆炸的一次，三个小时才出两个题，本来已经有打铁的打算了，封榜前铜牌倒数第五名。结果比赛完根本没滚榜，然后排名只下滑到了倒数第三，感觉就非常开心了。也算是人生第一块区域赛的牌子吧，不过这次比赛打的是真的惨。</p><p>然后第二场紧接着去的秦皇岛，坐的火车居然和去哈尔滨的一样。感受就是这是去过最好吃的食堂，又便宜又好吃。热身赛没有什么印象了。然后正式赛的体验就是感觉在打一场 5 小时的 CF，几乎用不到数据结构。算是非常接近银的一次了，最后 A 题卡住了，没有 A 出了，明明思路和做法都有了，不知道哪里错误…比赛后也是感觉非常可惜，最后算是铜首吧。</p><p>第三次青岛站，感觉正式赛的题还没有热身赛有意思，热身赛遇到了一个字典树上维护信息，当时想到了可以这样做，复杂度什么的都证明的很正确，感觉挺爽的，虽然没敲出来，比赛回来就找了一个类似的题补掉了。热身赛算是毫无比赛体验了，前期两个水题，然后一个本来是字符串 Hash 的中档题大家都水了过去，最后三题凭罚时银了…</p><p>第四场，CCPC Final，可以说是体验最好的一次了，在哈尔滨待了四天，逛了中央大街松花江教堂。热身赛差点爆零，当时就感觉这场比赛难度好恐怖了。正式赛体验还行，前期水题卡的时间有点长，不过后面中档题出的还算比较快，甚至还冲到了银牌区，不过还没居然卡在了我最喜欢的图论上…查分约束之前都没怎么刷过，感觉很可惜。如果能切掉这个题的话，可能也有银牌了。可以说是打的比较好的一次比赛了，中间和 dalao 们的排名差距很小。</p><p>最后是 ECL Final，食堂特别难吃！又贵又难吃，还一点肉都没有！热身赛这次爆零了，体验不是很好。正式赛前期简直爆炸，最简单的水题错了 3 发才过。到比赛中期感觉才上来，连过了几题才到了 100 多名。感觉会做的都做出来了，后面的题是真的心有余而力不足了。这次比赛感觉前面题的代码量太少，只靠思维猜结论…最后也是稳铜了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说还是先提升自身能力吧，接下来也没有组队的比赛了，补一下自己不擅长的数学几何之类的。然后比赛下来发现卡的并不是知识点，而是 CF 的那种题，明年之前打上紫名？另外队伍配合的并不好，比赛的时候一种感觉是在两个人打比赛…</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/12/20/2017%E8%B5%9B%E5%AD%A3%E5%B0%8F%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>URAL1523 - K-inversions（树状数组+DP）</title>
      <link>https://li-fish.github.io/2017/12/06/URAL1523-K-inversions%EF%BC%88%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-DP%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/12/06/URAL1523-K-inversions%EF%BC%88%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-DP%EF%BC%89/</guid>
      <pubDate>Wed, 06 Dec 2017 05:33:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1523" target="_blank" rel="external">http://acm.timus.ru/problem.aspx?space=1&amp;num=1523</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出 N 个数，求有多少个长度为 K 的严格递减子序列。</p><p>$1 \le N \le 20000$，$2 \le k \le 10$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>首先为了方便处理，我们翻转一下数组，这样答案变成了求递增。</p><p>定义状态 $dp[i][j]$的含义为以 i 结尾的长度为 j 的递增子序列个数。</p><p>那么可以这样转移 :</p><p>$$dp[i][j] = \sum^{i - 1}_{k = 1} dp[k][j - 1] (\text {where $a_k &lt; a_i$} )$$</p><p>这里我们依次计算长度$1 - k$的递增子序列，这样对长度为 j 的子序列就可以从左到右遍历数组，用树状数组统计长度为 j - 1 的子序列贡献。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">21234</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> data[MAX], tree[MAX], dp[MAX][<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">low_bit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x&amp;(-x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="comment">//给 x 这个位置增加 v</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n) &#123;</div><div class="line">        tree[x] = (tree[x] + v) % MOD;</div><div class="line">        x += low_bit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求 1 ～ x 的和</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x) &#123;</div><div class="line">        rst = (rst + tree[x]) % MOD;</div><div class="line">        x -= low_bit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, data + i);</div><div class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</div><div class="line">        <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            dp[j][i] = query(data[j]);</div><div class="line">            add(data[j], dp[j][i - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = (ans + dp[i][k]) % MOD;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>树状数组还是挺好用的，这种问题写线段树还是太麻烦了…</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/12/06/URAL1523-K-inversions%EF%BC%88%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-DP%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CodeForce727E - Games on a CD（字符串双hash模板）</title>
      <link>https://li-fish.github.io/2017/11/28/CodeForce727E-Games-on-a-CD%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8CHash%E6%A8%A1%E6%9D%BF%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/11/28/CodeForce727E-Games-on-a-CD%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8CHash%E6%A8%A1%E6%9D%BF%EF%BC%89/</guid>
      <pubDate>Tue, 28 Nov 2017 03:09:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/727/E&quot; t
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://codeforces.com/problemset/problem/727/E" target="_blank" rel="external">http://codeforces.com/problemset/problem/727/E</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一个长度为 $N \times k$  的字符串，可以将其看成一个环首尾相接。问这个字符串是否可以由下面给出的  g 个字符串组成，保证字符串不同并且<strong>长度均为 k</strong>，每个字符串只能用一次。</p><p>$1\le N, k \le 10^5$    $n \cdot k, g \cdot k \le 2 \times 10^6$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>这题只要会字符串 Hash 就会做了，首先把原串复制一遍放到结尾。因为每个串的长度都为 k 所以从 0 到 k 枚举起点，然后不断的跳到后面 k 个位置，判断 g 个字符串是否匹配上这一段子串并且没有被使用，如果找到一组解就输出答案。</p><p>复杂度$O(N\log n)$这里把 Hash 后的 pair 映射成整数，多了一个 log。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200000</span> + <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="comment">//--------------------双哈希---------------------------------------</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD[] = &#123;<span class="number">1000000007</span>, <span class="number">1000000009</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">10000017</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;ll&gt; hashValue[<span class="number">2</span>][MAX];</div><div class="line"><span class="built_in">string</span> str[MAX];</div><div class="line">ll powNum[<span class="number">2</span>][MAX];</div><div class="line"></div><div class="line"><span class="comment">//对一个字符串进行 hash 并保留前缀和</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</div><div class="line">        hashValue[k][n].clear();</div><div class="line">        hashValue[k][n].push_back(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= str[n].size(); i++) &#123;</div><div class="line">            hashValue[k][n].push_back((hashValue[k][n][i - <span class="number">1</span>] * P + str[n][i - <span class="number">1</span>]) % MOD[k]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获得某个字符串的任一子串的 hash 值</span></div><div class="line"><span class="keyword">inline</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; getHash(<span class="keyword">int</span> n, <span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (r == <span class="number">-1</span>) r = str[n].size() - <span class="number">1</span>;</div><div class="line">    l++, r++;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</div><div class="line">        ans.push_back((<span class="keyword">int</span>) (((hashValue[k][n][r] - hashValue[k][n][l - <span class="number">1</span>] * powNum[k][r - l + <span class="number">1</span>]) % MOD[k] + MOD[k]) %</div><div class="line">                             MOD[k]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> make_pair(ans[<span class="number">0</span>], ans[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化幂，计算过程中使用</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_pow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</div><div class="line">        powNum[k][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</div><div class="line">            powNum[k][i] = powNum[k][i - <span class="number">1</span>] * P % MOD[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将 hash 得到的 pair 映射成整数</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; store;</div><div class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; hashName;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; n, <span class="keyword">int</span> index = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hashName.count(n)) <span class="keyword">return</span> hashName[n];</div><div class="line">    store.push_back(index);</div><div class="line">    <span class="keyword">return</span> hashName[n] = store.size() - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//--------------------双哈希------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="keyword">bool</span> ok[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init_pow();</div><div class="line"></div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n, k, g;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; str[<span class="number">0</span>];</div><div class="line">    str[<span class="number">0</span>] = str[<span class="number">0</span>] + str[<span class="number">0</span>];</div><div class="line">    init(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= g; i++) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; str[i];</div><div class="line">        init(i);</div><div class="line">        getID(getHash(i), i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//枚举起点</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> st = <span class="number">0</span>; st &lt; k; st++) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="comment">//计算从起点到终点中，是否可以有 g 个字符串组成</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = st; i &lt; st + str[<span class="number">0</span>].size() / <span class="number">2</span>; i += k) &#123;</div><div class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; v = getHash(<span class="number">0</span>, i + <span class="number">1</span>, i + k);</div><div class="line">            <span class="keyword">if</span> (!hashName.count(v)) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> idx = getID(v);</div><div class="line">            <span class="keyword">if</span> (ok[idx]) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            ans.push_back(idx);</div><div class="line">            ok[idx] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, store[ans[i]]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++) &#123;</div><div class="line">            ok[ans[i]] = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>Hash 过程的代码完全参照<a href="https://www.bilibili.com/video/av7230433/?from=search&amp;seid=6735421237600758359" target="_blank" rel="external">卿学姐的视频</a>写的，非常感谢！</p><p><a href="http://pan.baidu.com/s/1c27PEF2" target="_blank" rel="external">PPT链接</a></p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/28/CodeForce727E-Games-on-a-CD%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8CHash%E6%A8%A1%E6%9D%BF%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>线性基小结</title>
      <link>https://li-fish.github.io/2017/11/27/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%B0%8F%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/11/27/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%B0%8F%E7%BB%93/</guid>
      <pubDate>Mon, 27 Nov 2017 02:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.sengxian.com/algorithms/linear-basis&quot; target=&quot;_b
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://blog.sengxian.com/algorithms/linear-basis" target="_blank" rel="external">Sengxian’s Blog</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感觉 Sengxian 的博客里面写的太好了，然后这里只打算添加一下自己的理解了。</p><p>首先所谓的线性基，就是把若干个整数，看成 n 维 01 向量（通常 n 不会超过 64，即 long long 的范围），然后求这些向量的一个极大无关组。需要注意的一点是，对于这里的 01 向量，只有异或运算。</p><p>不过一般为了方便处理，我们会把极大无关组进行列变换化最简形。<strong>一个向量空间可以有多个基，但是化为最简形后基是唯一的。化为最简形后和原来是等价的，由化最简形后的向量组可以表示的向量都可以由原向量组来表示。</strong></p><p>下面是利用高斯消元求解线性基的代码，由 Sengxian 的代码改过来的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = MAX_BASE; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (b[j]) data[i] ^= b[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    b[j] = data[i];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="keyword">if</span> (b[k] &amp;&amp; b[j] &gt;&gt; k &amp; <span class="number">1</span>) b[j] ^= b[k];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= MAX_BASE; k++) <span class="keyword">if</span> (b[k] &gt;&gt; j &amp; <span class="number">1</span>) b[k] ^= b[j];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="SGU-275"><a href="#SGU-275" class="headerlink" title="SGU-275"></a>SGU-275</h1><p>给出 N 个数，求 N 个数异或可以得到的最大值，数的范围在 long long 内。</p><p>求出线性基，然后异或就是答案，这里 Sengxian 博客有证明，不过这里补充一点，<strong>对于上面算法得到的线性基是唯一的</strong>。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_BASE = <span class="number">63</span>;</div><div class="line"></div><div class="line">ll b[<span class="number">200</span>];</div><div class="line">ll a[<span class="number">11234</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = MAX_BASE; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i] &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (b[j]) a[i] ^= b[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    b[j] = a[i];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="keyword">if</span> (b[k] &amp;&amp; b[j] &gt;&gt; k &amp; <span class="number">1</span>) b[j] ^= b[k];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= MAX_BASE; k++) <span class="keyword">if</span> (b[k] &gt;&gt; j &amp; <span class="number">1</span>) b[k] ^= b[j];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</div><div class="line">        &#125;</div><div class="line">        cal(n);</div><div class="line">        ll ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= MAX_BASE; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (b[i] &gt;&gt; i &amp; <span class="number">1</span>) ans ^= b[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="CF-895C"><a href="#CF-895C" class="headerlink" title="CF-895C"></a>CF-895C</h1><p>给出 N 个数的集合，问能取出多少不同的子集，使得乘积是平方数。输入的数字小于 70 。</p><p>对平方数进行质因数分解，会发现每个质因子的幂都是偶数。现在对输入的 N 个数进行质因数分解，对每个质因子只对它的幂的奇偶性有关，可以计算小于 70 的质因子只有 20 个，那么我们用一个 01 变量来表示每个数质因子奇偶性的情况。</p><p>然后我们对这 N 个 01 向量求线性基，那么答案就是 $2^{N - BaseSize} - 1$，注意线性基其实就是选了若干个线性无关的向量并且化简后的结果。这时候对于没有选中的向量，取任意子集，异或得到的向量都可以由线性基基来表示，总共有上面答案数的子集（减去了空集）。对于线性基选中的向量，因为是线性无关，所以不能互相表示，不贡献答案。</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">112345</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_BASE = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> now_prime[<span class="number">200</span>];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; primes;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_primes</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">70</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (now_prime[i]) <span class="keyword">continue</span>;</div><div class="line">        primes.push_back(i);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt;= <span class="number">70</span>; j += i) &#123;</div><div class="line">            now_prime[j] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> raw_data[MAX];</div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; primes.size(); i++) &#123;</div><div class="line">        <span class="keyword">while</span> (n % primes[i] == <span class="number">0</span>) &#123;</div><div class="line">            rst ^= (<span class="number">1</span> &lt;&lt; i);</div><div class="line">            n /= primes[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> b[<span class="number">200</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = MAX_BASE; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (b[j]) data[i] ^= b[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    b[j] = data[i];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="keyword">if</span> (b[k] &amp;&amp; b[j] &gt;&gt; k &amp; <span class="number">1</span>) b[j] ^= b[k];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= MAX_BASE; k++) <span class="keyword">if</span> (b[k] &gt;&gt; j &amp; <span class="number">1</span>) b[k] ^= b[j];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(ll a, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll rst = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (k) &#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) rst = rst * a % MOD;</div><div class="line">        a = a * a % MOD;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    get_primes();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, raw_data + i);</div><div class="line">        data[i] = solve(raw_data[i]);</div><div class="line">    &#125;</div><div class="line">    cal(n);</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= MAX_BASE; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (b[i]) cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (pow_mod(<span class="number">2</span>, n - cnt) - <span class="number">1</span> + MOD) % MOD);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/27/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%B0%8F%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>K-D树小结</title>
      <link>https://li-fish.github.io/2017/11/20/K-D%E6%A0%91%E5%B0%8F%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/11/20/K-D%E6%A0%91%E5%B0%8F%E7%BB%93/</guid>
      <pubDate>Mon, 20 Nov 2017 11:05:08 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;资料-amp-感谢&quot;&gt;&lt;a href=&quot;#资料-amp-感谢&quot; class=&quot;headerlink&quot; title=&quot;资料&amp;amp;感谢&quot;&gt;&lt;/a&gt;资料&amp;amp;感谢&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.sengxian.com/algorit
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="资料-amp-感谢"><a href="#资料-amp-感谢" class="headerlink" title="资料&amp;感谢"></a>资料&amp;感谢</h1><p><a href="https://blog.sengxian.com/algorithms/k-dimensional-tree" target="_blank" rel="external"><a href="https://blog.sengxian.com/" target="_blank" rel="external">Sengxian’s Blog</a></a></p><p><a href="https://www.bilibili.com/video/av7039143/?from=search&amp;seid=12824880607180236401" target="_blank" rel="external">QSC算法讲堂</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>K-D 树是 K 维树（k-dimensional tree）的缩写，可以用来寻找 K 维空间中距离一个点最近的若干个点，不过在 ACM 中一般用来处理平面的最近点对问题。</p><p>K-D 树实质上是一颗二叉树，所以可以做到插入删除点都是 $O(\log n)$，在建树的时候每次按一个维度排序后，取中间点把空间划分为两部分，在这个维度上小于中间点的放到左儿子，大于中间点的放到右儿子。</p><p>这里为了简单，首先从一维的 K-D 树入手。</p><h2 id="一维的-K-D-树"><a href="#一维的-K-D-树" class="headerlink" title="一维的 K-D 树"></a>一维的 K-D 树</h2><p><img src="http://chuantu.biz/t6/152/1511176656x-1566638157.png" alt="一维 K-D 树"></p><p>上图是一颗一维的 K-D，对于一维的情况，所有的点都是数轴上的点，那么这时候<br>K-D 树就是一颗普通的二叉搜索树（Binary Search Tree）。</p><h2 id="二维的-K-D-树"><a href="#二维的-K-D-树" class="headerlink" title="二维的 K-D 树"></a>二维的 K-D 树</h2><p><img src="http://chuantu.biz/t6/152/1511176920x-1566638157.png" alt="二维 K-D 树"></p><p>这时候就是交替的按 x 维和 y 维排序进行划分的。上面就是对点集 <code>(2,3), (5,4), (9,6), (4,7), (8,1), (7,2)</code>的划分。</p><p><img src="http://chuantu.biz/t6/152/1511177069x-1566638157.png" alt=""></p><p>上面的划分对应的树型结构就是这样的，对于第一层，左子树的点的 x 坐标都小于根节点，右子树的点的 x 坐标都大于根节点。对于第二层，左子树的点的 y 坐标都小于根节点，右子树的点的 y 坐标都大于根节点，以此类推。</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>K-D 树的每个节点不仅要保存当前点的坐标信息，还要维护当前子树每个维度上的边界点。</p><p>这里 <a href="https://blog.sengxian.com/algorithms/k-dimensional-tree" target="_blank" rel="external">Sengxian</a> 巨巨写的非常好，就直接引用了。</p><blockquote><p>在构造 1 维 BST 树时，一个 1 维数据根据其与树的根结点进行大小比较，来决定是划分到左子树还是右子树。<br>同理，我们也可以按照这样的方式，将一个 $k$ 维数据与 k-d树 的根结点进行比较，只不过不是对 $k$ 维数据进行整体的比较，而是选择某一个维度 $D_i$，然后比较两个数据在该维度 $D_i$ 上的大小关系，即每次选择一个维度 $D_i$ 来对 $k$ 维数据进行划分，相当于用一个垂直于该维度 $D_i$ 的超平面将 $k$ 维数据空间一分为二，平面一边的所有 $k$ 维数据在 $D_i$ 维度上的值小于平面另一边的所有 $k$ 维数据对应维度上的值。<br>也就是说，我们每选择一个维度进行如上的划分，就会将 $k$ 维数据空间划分为两个部分，如果我们继续分别对这两个子 $k$ 维空间进行如上的划分，又会得到新的子空间，对新的子空间又继续划分，重复以上过程直到每个子空间都不能再划分为止。以上就是构造 k-d树 的过程。<br>那么如果是二维特殊情况，就变得非常好理解了，通俗的来说就是通过过已有点的横线，竖线来划分二维平面。<br>上述过程中涉及到两个重要的问题：</p><ol><li>每次对子空间的划分时，怎样确定在哪个维度上进行划分？</li><li>在某个维度上进行划分时，怎样确保在这一维度上的划分得到的两个子集合的数量尽量相等，即左子树和右子树中的结点个数尽量相等？</li></ol><p>对于第一个问题，有很多种方法可以选择划分维度（axis-aligned splitting planes），所以有很多种创建 k-d树 的方法。 最典型的方法如下：<br>随着树的深度轮流选择维度来划分。例如，在二维空间中根节点以 x 轴划分，其子节点皆以 y 轴划分，其孙节点又以 x 轴划分，其曾孙节点则皆为 y 轴划分，依此类推。<br>另外的划分方法还有最大方差法（max invarince），在这里不做介绍。</p><p>而对于第二个问题，也是在 BST 中会遇到的一个问题。在 BST 中，我们是将数据的中位数作为根节点，然后再左右递归下去建树，这样可以得到一棵平衡的二叉搜索树。<br>同样，在 k-d树 中，若在维度 $D_i$ 上进行划分时，根节点就应该选择该维度 $D_i$ 上所有数据的中位数，这样递归子树的大小就基本相同了。</p></blockquote><h2 id="K-D-树单个节点"><a href="#K-D-树单个节点" class="headerlink" title="K-D 树单个节点"></a>K-D 树单个节点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="comment">//d 数组储存当前点，minn 和 maxn 表示当前节点维护的矩形的边界</span></div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line"></div><div class="line">    <span class="comment">//对节点进行初始化</span></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX];</div><div class="line"></div><div class="line"><span class="comment">//通过修改全局变量 D，实现按不同维度排序</span></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    <span class="comment">//将中间数放到 mid 位置，小于中间数的放左边，大于的放右边，不保证左右边有序，类似快排的一部分，复杂度O(N)</span></div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    <span class="comment">//初始化节点信息</span></div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="comment">//维护子树信息</span></div><div class="line">    pushUp(mid);</div><div class="line">    re</div></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> k, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="comment">//如果当前节点为空，就直接将赋值</span></div><div class="line">    <span class="keyword">if</span> (o == <span class="number">0</span>) &#123;</div><div class="line">        o = k;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//否则根据 now 维的大小进行二分查找</span></div><div class="line">    <span class="keyword">if</span> (tree[k].d[now] &lt; tree[o].d[now]) insert(tree[o].l, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">else</span> insert(tree[o].r, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="comment">//插入节点后更新信息</span></div><div class="line">    pushUp(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h2 id="最近点"><a href="#最近点" class="headerlink" title="最近点"></a>最近点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//当前查找的点距离节点维护的矩阵的最近距离</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += tree[k].d[i] - tree[o].maxn[i];</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += tree[o].minn[i] - tree[k].d[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="comment">//通过当前节点储存的点更新答案</span></div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (dm &lt; ans) ans = dm;</div><div class="line">    <span class="comment">//计算左右子树距离当前点可能的最近的答案</span></div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line"></div><div class="line">    <span class="comment">//通过搜索顺序进行剪枝</span></div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="comment">//如果最近可能的点都大于答案，那么不可能更新答案</span></div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>初始化答案为无穷，从根节点开始，首先通过节点储存的点去更新答案。然后计算左右子树维护的矩形区域离当前查询的点的最近可能距离，然后首先搜距离近的，再搜远的，实际上就是一个剪枝。复杂度一般是$O(\log n)$，最差可能是$O(n \sqrt{n})$。</p><p>上面是曼哈顿距离，对于欧式几何距离用下面计算，也就是一个点到矩形的最近距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tree[o].minn[<span class="number">2</span>] &gt; tree[k].d[<span class="number">2</span>]) <span class="keyword">return</span> INF;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += sqr(tree[k].d[i] - tree[o].maxn[i]);</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += sqr(tree[o].minn[i] - tree[k].d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>扩展成求到某个点最近的 k 个点也比较容易，查询的时候维护一个最大堆就可以了，之前的剪枝，就是对对顶进行比较了，如果大于堆顶一定不可能更新答案。</p><h1 id="题集"><a href="#题集" class="headerlink" title="题集"></a>题集</h1><h2 id="BZOJ-2648"><a href="#BZOJ-2648" class="headerlink" title="BZOJ 2648"></a>BZOJ 2648</h2><p>裸的 K-D 树题，求到某个点的最近曼哈顿距离。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">500010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX * <span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> D;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> root = <span class="number">0</span>, pos = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += tree[k].d[i] - tree[o].maxn[i];</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += tree[o].minn[i] - tree[k].d[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (dm &lt; ans) ans = dm;</div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt; ans) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt; ans) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> k, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="number">0</span>) &#123;</div><div class="line">        o = k;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (tree[k].d[now] &lt; tree[o].d[now]) insert(tree[o].l, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">else</span> insert(tree[o].r, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(o);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    n = read();</div><div class="line">    m = read();</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) tree[i].d[j] = read();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line"> </div><div class="line">    pos = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> op;</div><div class="line">    <span class="keyword">while</span> (m--) &#123;</div><div class="line">        op = read();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) tree[pos].d[j] = read();</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</div><div class="line">            tree[pos].maintain();</div><div class="line">            insert(root, pos, <span class="number">0</span>);</div><div class="line">            pos++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ans = INF;</div><div class="line">            query(root, pos);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="BZOJ-1941"><a href="#BZOJ-1941" class="headerlink" title="BZOJ 1941"></a>BZOJ 1941</h2><p>求每个点的最近点和最远的的距离差值最小的，用 K-D 树求每个点的最远点和最近点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">500010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX * <span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> D;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> root = <span class="number">0</span>, pos = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ansMin, ansMax;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += tree[k].d[i] - tree[o].maxn[i];</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += tree[o].minn[i] - tree[k].d[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partionMax</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        rst += max(<span class="built_in">abs</span>(tree[k].d[i] - tree[o].minn[i]), <span class="built_in">abs</span>(tree[k].d[i] - tree[o].maxn[i]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (o == k) dm = INF;</div><div class="line">    <span class="keyword">if</span> (dm &lt; ansMin) ansMin = dm;</div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt; ansMin) queryMin(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt; ansMin) queryMin(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt; ansMin) queryMin(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt; ansMin) queryMin(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(tree[o].d[<span class="number">0</span>] - tree[k].d[<span class="number">0</span>]) + <span class="built_in">abs</span>(tree[o].d[<span class="number">1</span>] - tree[k].d[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (dm &gt; ansMax) ansMax = dm;</div><div class="line">    <span class="keyword">int</span> dl = tree[o].l ? partionMax(tree[o].l, k) : <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> dr = tree[o].r ? partionMax(tree[o].r, k) : <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (dl &gt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &gt; ansMax) queryMax(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &gt; ansMax) queryMax(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &gt; ansMax) queryMax(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &gt; ansMax) queryMax(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;tree[i].d[<span class="number">0</span>], &amp;tree[i].d[<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            ansMax = <span class="number">0</span>;</div><div class="line">            ansMin = INF;</div><div class="line">            queryMax(root, i);</div><div class="line">            queryMin(root, i);</div><div class="line">            ans = min(ans, ansMax - ansMin);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="BZOJ-4066"><a href="#BZOJ-4066" class="headerlink" title="BZOJ 4066"></a>BZOJ 4066</h2><p>给出一个$n \times n$的棋盘，每次对其中的一个点修改中，询问一个矩形，求矩形内点的和。</p><p>这里插入的点的数量有点多，可能导致树的形态太差，所以插入点树每过 10000 就暴力重构一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line">    <span class="keyword">int</span> sum, v;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        sum = v;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX * <span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> D;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> root = <span class="number">0</span>, pos = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    tree[p].sum = tree[son[<span class="number">0</span>]].sum + tree[p].v + tree[son[<span class="number">1</span>]].sum;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"><span class="keyword">int</span> xl, xr, yl, yr;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xr &lt; tree[o].minn[<span class="number">0</span>] || tree[o].maxn[<span class="number">0</span>] &lt; xl  ||</div><div class="line">        yr &lt; tree[o].minn[<span class="number">1</span>] || tree[o].maxn[<span class="number">1</span>] &lt; yl)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (xl &lt;= tree[o].minn[<span class="number">0</span>] &amp;&amp; tree[o].maxn[<span class="number">0</span>] &lt;= xr &amp;&amp;</div><div class="line">        yl &lt;= tree[o].minn[<span class="number">1</span>] &amp;&amp; tree[o].maxn[<span class="number">1</span>] &lt;= yr) &#123;</div><div class="line">        ans += tree[o].sum;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (xl &lt;= tree[o].d[<span class="number">0</span>] &amp;&amp; tree[o].d[<span class="number">0</span>] &lt;= xr &amp;&amp;</div><div class="line">        yl &lt;= tree[o].d[<span class="number">1</span>] &amp;&amp; tree[o].d[<span class="number">1</span>] &lt;= yr)</div><div class="line">        ans += tree[o].v;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (tree[o].l) query(tree[o].l);</div><div class="line">    <span class="keyword">if</span> (tree[o].r) query(tree[o].r);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> k, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="number">0</span>) &#123;</div><div class="line">        o = k;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (tree[k].d[now] &lt; tree[o].d[now]) insert(tree[o].l, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">else</span> insert(tree[o].r, k, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(o);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">bool</span> type = <span class="literal">true</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">if</span> (type) t ^= ans;</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> op;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        op = read(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">3</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) tree[pos].d[j] = read();</div><div class="line">            tree[pos].v = read();</div><div class="line">            tree[pos].maintain();</div><div class="line">            insert(root, pos, <span class="number">0</span>);</div><div class="line">            pos++;</div><div class="line">            <span class="keyword">if</span> (pos % <span class="number">10000</span> == <span class="number">0</span>) root = build(<span class="number">1</span>, pos - <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            xl = read();</div><div class="line">            yl = read();</div><div class="line">            xr = read();</div><div class="line">            yr = read();</div><div class="line"> </div><div class="line">            ans = <span class="number">0</span>;</div><div class="line">            query(root);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="HDU-5992"><a href="#HDU-5992" class="headerlink" title="HDU 5992"></a>HDU 5992</h2><p>三维 K-D 树，求二维平面是距离某个点最近的点，并且第三维不超过某个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> DIM = <span class="number">3</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> d[DIM], minn[DIM], maxn[DIM];</div><div class="line">&#125; tree[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> D;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) tree[mid].maxn[i] = tree[mid].minn[i] = tree[mid].d[i];</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(<span class="keyword">const</span> ll &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sqr((ll) a.d[<span class="number">0</span>] - (ll) b.d[<span class="number">0</span>]) + sqr((ll) a.d[<span class="number">1</span>] - (ll) b.d[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tree[o].minn[<span class="number">2</span>] &gt; tree[k].d[<span class="number">2</span>]) <span class="keyword">return</span> INF;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += sqr(tree[k].d[i] - tree[o].maxn[i]);</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += sqr(tree[o].minn[i] - tree[k].d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ll ans1;</div><div class="line"><span class="keyword">int</span> ans2, ansNode;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll dm = dis(tree[o], tree[k]);</div><div class="line">    <span class="keyword">if</span> (tree[o].d[<span class="number">2</span>] &lt;= tree[k].d[<span class="number">2</span>] &amp;&amp; (dm &lt; ans1 || dm == ans1 &amp;&amp; tree[o].id &lt; ans2)) &#123;</div><div class="line">        ans1 = dm;</div><div class="line">        ans2 = tree[o].id;</div><div class="line">        ansNode = o;</div><div class="line">    &#125;</div><div class="line">    ll dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    ll dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt;= ans1) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt;= ans1) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt;= ans1) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt;= ans1) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n, m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[i].d[j]);</div><div class="line">            tree[i].l = tree[i].r = <span class="number">0</span>;</div><div class="line">            tree[i].id = i;</div><div class="line">        &#125;</div><div class="line">        root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[n + <span class="number">1</span>].d[j]);</div><div class="line">            ans1 = INF;</div><div class="line">            query(root, n + <span class="number">1</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, tree[ansNode].d[<span class="number">0</span>], tree[ansNode].d[<span class="number">1</span>], tree[ansNode].d[<span class="number">2</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="HDU-4347"><a href="#HDU-4347" class="headerlink" title="HDU 4347"></a>HDU 4347</h2><p>求 k 维的最近 m 个点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">50000</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXDIM = <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> DIM;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> d[MAXDIM], minn[MAXDIM], maxn[MAXDIM];</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">            minn[i] = maxn[i] = d[i];</div><div class="line">        &#125;</div><div class="line">        l = r = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; tree[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> D;</div><div class="line">priority_queue&lt;pair&lt;ll, <span class="keyword">int</span>&gt; &gt; q;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</div><div class="line">    <span class="keyword">return</span> a.d[D] &lt; b.d[D];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>] = &#123;tree[p].l, tree[p].r&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!son[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">            tree[p].maxn[j] = max(tree[son[i]].maxn[j], tree[p].maxn[j]);</div><div class="line">            tree[p].minn[j] = min(tree[son[i]].minn[j], tree[p].minn[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    D = now;</div><div class="line">    nth_element(tree + l, tree + mid, tree + r + <span class="number">1</span>);</div><div class="line">    tree[mid].maintain();</div><div class="line">    <span class="keyword">if</span> (l &lt; mid) tree[mid].l = build(l, mid - <span class="number">1</span>, (now + <span class="number">1</span>) % DIM);</div><div class="line">    <span class="keyword">if</span> (mid &lt; r) tree[mid].r = build(mid + <span class="number">1</span>, r, (now + <span class="number">1</span>) % DIM);</div><div class="line">    pushUp(mid);</div><div class="line">    <span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(<span class="keyword">const</span> ll &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span> </span>&#123;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        rst += sqr((ll) a.d[i] - (ll) b.d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>  rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll rst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &gt; tree[o].maxn[i]) rst += sqr(tree[k].d[i] - tree[o].maxn[i]);</div><div class="line">        <span class="keyword">if</span> (tree[k].d[i] &lt; tree[o].minn[i]) rst += sqr(tree[o].minn[i] - tree[k].d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    ll dm = dis(tree[o], tree[k]);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (dm &lt; q.top().first) &#123;</div><div class="line">        q.pop();</div><div class="line">        q.push(make_pair(dm, o));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ll dl = tree[o].l ? partionMin(tree[o].l, k) : INF;</div><div class="line">    ll dr = tree[o].r ? partionMin(tree[o].r, k) : INF;</div><div class="line">    <span class="keyword">if</span> (dl &lt; dr) &#123;</div><div class="line">        <span class="keyword">if</span> (dl &lt;= q.top().first) query(tree[o].l, k);</div><div class="line">        <span class="keyword">if</span> (dr &lt;= q.top().first) query(tree[o].r, k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (dr &lt;= q.top().first) query(tree[o].r, k);</div><div class="line">        <span class="keyword">if</span> (dl &lt;= q.top().first) query(tree[o].l, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;DIM)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[i].d[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        root = build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> t, m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        <span class="keyword">while</span> (t--) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM; i++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tree[n + <span class="number">1</span>].d[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">            <span class="keyword">while</span> (!q.empty()) q.pop();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) q.push(make_pair(INF, <span class="number">-1</span>));</div><div class="line">            query(root, n + <span class="number">1</span>);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">            <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">                ans.push_back(q.top().second);</div><div class="line">                q.pop();</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"the closest %d points are:\n"</span>, m);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ans.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; DIM; j++) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, tree[ans[i]].d[j], j == DIM - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/20/K-D%E6%A0%91%E5%B0%8F%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SDUTOJ4079 - Cirno のさんすう教室(模拟)</title>
      <link>https://li-fish.github.io/2017/11/20/SDUTOJ4079-Cirno-%E3%81%AE%E3%81%95%E3%82%93%E3%81%99%E3%81%86%E6%95%99%E5%AE%A4-%E6%A8%A1%E6%8B%9F/</link>
      <guid>https://li-fish.github.io/2017/11/20/SDUTOJ4079-Cirno-%E3%81%AE%E3%81%95%E3%82%93%E3%81%99%E3%81%86%E6%95%99%E5%AE%A4-%E6%A8%A1%E6%8B%9F/</guid>
      <pubDate>Mon, 20 Nov 2017 04:32:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.sdut.edu.cn/onlinejudge2/index.php/Hom
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Contest/contestproblem/cid/2326/pid/4079" target="_blank" rel="external">http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Contest/contestproblem/cid/2326/pid/4079</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出若干个类似 “A + B = C” 的等式（ABC均为一位的正整数），其中每个等式有可能至多有一个位置为 “?”，运算符只有”+ - *”。</p><p>题目需要输出每个复原后的等式，有可能等式本来就不需要复原，保证问号也为一位的正整数。</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>不难发现每个问号都有一个唯一的解，然后就是一道小学的算术题了。</p><p>分情况判断：</p><ul><li>? + B = C，那么 ? = C - B</li><li>A * ? = C，那么 ? = C / A</li><li>以此类推….</li></ul><p>这里可能好多同学读字符的时候出了问题，这里说一下，scanf函数里面添加一个空白字符，在读取的时候可以忽略掉若干个空白字符，比如我scanf(“ %c”, &amp;ch)，就可以读取 “  1”，前者有一个空格，后者两个。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">while</span> (n--) &#123;</div><div class="line">        <span class="keyword">char</span> a, b, c, d, e;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">" %c %c %c %c %c"</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;e);</div><div class="line">        a -= <span class="string">'0'</span>, c -= <span class="string">'0'</span>, e -= <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">if</span> (b == <span class="string">'+'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (a == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                a = e - c;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                c = e - a;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                e = a + c;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="string">'-'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (a == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                a = e + c;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                c = a - e;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                e = a - c;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (a == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                a = e / c;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'?'</span> - <span class="string">'0'</span>) &#123;</div><div class="line">                c = e / a;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                e = a * c;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c %c %c %c %c\n"</span>, a + <span class="string">'0'</span>, b, c + <span class="string">'0'</span>, d, e + <span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/20/SDUTOJ4079-Cirno-%E3%81%AE%E3%81%95%E3%82%93%E3%81%99%E3%81%86%E6%95%99%E5%AE%A4-%E6%A8%A1%E6%8B%9F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SDUTOJ4071 - 绿博的帽子（前缀和）</title>
      <link>https://li-fish.github.io/2017/11/20/SDUTOJ4071-%E7%BB%BF%E5%8D%9A%E7%9A%84%E5%B8%BD%E5%AD%90%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/11/20/SDUTOJ4071-%E7%BB%BF%E5%8D%9A%E7%9A%84%E5%B8%BD%E5%AD%90%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</guid>
      <pubDate>Mon, 20 Nov 2017 04:21:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.sdut.edu.cn/onlinejudge2/index.php/Hom
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/4071.html" target="_blank" rel="external">http://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/4071.html</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出 n 个数 $a_1, a_2, a_3 \dots a<em>n$，进行 q 次询问，每次输出 $\sum</em>{k = l}^r $$a_k$。</p><p>$1 \le n, m, l, r \le 100000, l \le r \le n$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>题意很简单，但是如果直接用 for 循环去求 l 到 r 的和的话会超时，可以计算一下，最多有 100000 次询问，每次最差计算 100000 次，这样总共时间复杂度是 $10^{10}$，计算机一秒大概只能计算$10^{9}$次，所以肯定会超时。</p><p>这时候我们定义$S<em>i = \sum</em>{k=1}^i ​$ $a_k​$，这样我们可以用一个 for 循环求出所有的 Si，这样对于每一个 l, r 的询问，我们用 $S<em>r​$ $- S</em>{l - 1}​$即是答案，这样总共的时间复杂度是 $10^5​$。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">112345</span>;</div><div class="line"><span class="keyword">int</span> S[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, S + i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            S[i] += S[i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span> (q--) &#123;</div><div class="line">            <span class="keyword">int</span> l, r;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, S[r] - S[l - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/20/SDUTOJ4071-%E7%BB%BF%E5%8D%9A%E7%9A%84%E5%B8%BD%E5%AD%90%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ICPC青岛站总结</title>
      <link>https://li-fish.github.io/2017/11/09/ICPC%E9%9D%92%E5%B2%9B%E7%AB%99%E6%80%BB%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/11/09/ICPC%E9%9D%92%E5%B2%9B%E7%AB%99%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Thu, 09 Nov 2017 06:38:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;老师要求每场比赛后要写一份总结…有点小学的时候强行每天写日记的感觉了。于是看看能不能写出点东西，就放在博客上了。&lt;/p&gt;
&lt;h1 id=&quot;经
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>老师要求每场比赛后要写一份总结…有点小学的时候强行每天写日记的感觉了。于是看看能不能写出点东西，就放在博客上了。</p><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>总的来说体验一般吧，不论是坐车还是吃饭什么的，没有去哈尔滨或者杭州那么遥远的感觉，毕竟还没出省，（然后没有比赛的感觉？）。感觉两天时间一会就过去了，仿佛还没打比赛。然后到现在去青岛的经历都记不太清了…</p><h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><p>热身赛的时候还是打算先练练手了，最后排名好像是在银牌区，算是认真打了下。最后在想 C 题，突然奇想用线段树的维护信息方式去写字典树，然后好像就可以做了，不过到比赛结束还没有调出来有点可惜，回来的后补掉了一个类似的题。</p><p>正式赛惯例还是我来敲签到题，这两场的发挥还算正常，做完签到题能够在银牌区，不过出打印图形的题的时候算是失误了一下，出的比较慢，当时好像在 90 名左右。之后就去看那个字符串题了，按照后缀数组的暴力做法让队友敲了一个半小时才调过了样例，然后我试了下造的大数据，发现 1000 的数据两就差不多 TLE 了，然后就交，这时候我一直在想简单的算法，感觉 A 的人那么多，不可能这么多队都会后缀数组，然后写了一个最差情况下可能 T 的算法，交上去就 A 了。这时候排名 50 左右，银牌是肯定稳了，毕竟一个小时不可能滚上去 50 多个队。最后一小时读了一个题，然后一点思路都没有，最后一个小时算是很绝望了…</p><h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>这场比赛感觉题出的是真的不好，前三题是一点难度都没有，只要手速快点，胆子大点就莫名其妙的前 100 名了，这样随随便便就拿到的名次感觉都对不起平时的训练。不过有银牌还是非常开心的，自我评价我们队的水平也就是介于铜牌和银牌之间。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/11/09/ICPC%E9%9D%92%E5%B2%9B%E7%AB%99%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>51nod1378 - 夹克老爷的愤怒（树型DP+贪心）</title>
      <link>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/</guid>
      <pubDate>Tue, 31 Oct 2017 12:51:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.htm
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1378" target="_blank" rel="external">http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1378</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一张 N 个节点树形图，从中选若干个节点，使得途中任一节点距离最近的选中节点的距离不超过 K。</p><p>$1\le N\le 1e5, 0 \le K \le N$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>树型DP，贪心的放，刚开始对于一颗子树，如果深度等于 K 那么肯定选中这颗子树的根节点。这时候这个选中的节点不仅对子孙节点有贡献，还对祖先或兄弟节点有贡献，这时候我们用一个数组 DP[i] 记录某个点可以做出多少贡献，或一个点需要多少的贡献。</p><p>比如选中了 u 节点，那么他具有 k 的贡献，他的父亲和孩子都有 k - 1的贡献。对于一个叶子节点视它为 0 点贡献，那么他的祖先就需要 -1 点贡献。</p><p>对于每个节点需要维护的是一颗子树的信息，要满足以它为根的子树里面的所有节点的需求。</p><p>通过以下方式进行转移：</p><p><code>minn = min(dp[child]), maxn = max(dp[child]);</code></p><p>如果当前节点为叶子节点，那么 <code>minn = maxn = 0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if minn &lt;= -k#这时 u 的子树中已经有一个节点需求为 -k，如果不选中当前节点肯定无解</div><div class="line">    dp[u] = k, ans++</div><div class="line">else if maxn + minn &gt; 0#这时 u 的子树中有一个节点的贡献可以满足其他节点的需求</div><div class="line">    dp[u] = maxn - 1</div><div class="line">else #如果不满足这两种情况，那么贪心的想，需求向祖先节点需求</div><div class="line">dp[u] = minn - 1</div></pre></td></tr></table></figure><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100000</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minn = INF;</div><div class="line">    <span class="keyword">int</span> maxn = -INF;</div><div class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : edge[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        dfs(v, u);</div><div class="line">        ok = <span class="literal">true</span>;</div><div class="line">        minn = min(dp[v], minn);</div><div class="line">        maxn = max(dp[v], maxn);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!ok) maxn = minn = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (minn &lt;= -k) dp[u] = k, ans++;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (maxn + minn &gt; <span class="number">0</span>) dp[u] = maxn - <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> dp[u] = minn - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</div><div class="line">        edge[u].push_back(v);</div><div class="line">        edge[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (dp[<span class="number">0</span>] &lt; <span class="number">0</span>) ans++;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>在白书上看到了一个类似的题，然后扩展了一下，去群里问了下做法，感觉应该是很经典的题，然后人形题库 qls 就给出 51nod 上的原题，于是就补了一下。还是有一个坑点的，如果直接不考虑叶子节点的话，对于 k = 0 的情况需要特判。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU4819 - Mosaic（二维线段树-单点更新区间查询 + 模板）</title>
      <link>https://li-fish.github.io/2017/10/27/HDU4819-Mosaic%EF%BC%88%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8D%95%E7%82%B9%E6%9B%B4%E6%96%B0%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2-%E6%A8%A1%E6%9D%BF%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/27/HDU4819-Mosaic%EF%BC%88%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8D%95%E7%82%B9%E6%9B%B4%E6%96%B0%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2-%E6%A8%A1%E6%9D%BF%EF%BC%89/</guid>
      <pubDate>Fri, 27 Oct 2017 10:11:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/HDU-4819&quot; target=&quot;_bla
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="https://vjudge.net/problem/HDU-4819" target="_blank" rel="external">https://vjudge.net/problem/HDU-4819</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一个 n <em> n 的矩阵，每个位置有一个整数值。进行 q 次操作，每次选矩阵的一个元素为中心，取以这个元素为中心的 L </em> L 的最大值和最小值，将这个元素的值赋值成最大值最小值的平均值。</p><p>$n \le 800, q \le 100000$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>裸的二维线段树，单点修改，询问区间最值。</p><p>其实二维的线段树就是一个行线段树套列线段树，注意进行更新的时候，不能直接赋值修改，只修改行线段树叶子节点里面列线段树的叶子节点，然后向上合并。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1010</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o&lt;&lt;1|1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MID int m = (l + r) &gt;&gt; 1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//列线段树，用来维护列的节点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Nodey</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> Max, Min;</div><div class="line"></div><div class="line">    Nodey <span class="keyword">operator</span>+(<span class="keyword">const</span> struct Nodey &amp;t) &#123;</div><div class="line">        Nodey rst;</div><div class="line">        rst.Max = max(Max, t.Max);</div><div class="line">        rst.Min = min(Min, t.Min);</div><div class="line">        <span class="keyword">return</span> rst;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> locy[MAX], locx[MAX];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//行线段树，用来维护行的节点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Nodex</span> &#123;</span></div><div class="line">    Nodey sty[MAX &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        sty[o].Max = -INF;</div><div class="line">        sty[o].Min = INF;</div><div class="line">        <span class="keyword">if</span> (l == r) &#123;</div><div class="line">            locy[l] = o;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        MID;</div><div class="line">        build(lson, l, m);</div><div class="line">        build(rson, m + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Nodey <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (qr &lt; l || r &lt; ql) <span class="keyword">return</span> (Nodey) &#123;-INF, INF&#125;;</div><div class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> sty[o];</div><div class="line">        MID;</div><div class="line">        <span class="keyword">return</span> query(lson, l, m, ql, qr) + query(rson, m + <span class="number">1</span>, r, ql, qr);</div><div class="line">    &#125;</div><div class="line">&#125; stx[MAX &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    stx[o].build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        locx[l] = o;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    MID;</div><div class="line">    build(lson, l, m);</div><div class="line">    build(rson, m + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//进行单点更新，这里首先更新了叶子节点，然后向上合并父亲节点；</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tx = locx[x];</div><div class="line">    <span class="keyword">int</span> ty = locx[y];</div><div class="line">    stx[tx].sty[ty].Min = stx[tx].sty[ty].Max = val;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tx; i; i &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = ty; j; j &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (i == tx &amp;&amp; j == ty) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (j == ty) &#123;</div><div class="line">                <span class="comment">//如果当前更新的列就是需要更新的叶子节点，那么由当前行的两个儿子节点来更新信息</span></div><div class="line">                stx[i].sty[j] = stx[i &lt;&lt; <span class="number">1</span>].sty[j] + stx[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sty[j];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//否则由当前列的如果儿子节点来更新</span></div><div class="line">                stx[i].sty[j] = stx[i].sty[j &lt;&lt; <span class="number">1</span>] +  stx[i].sty[j &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Nodey <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> y1, <span class="keyword">int</span> y2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (qr &lt; l || r &lt; ql) <span class="keyword">return</span> (Nodey) &#123;-INF, INF&#125;;</div><div class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> stx[o].query(<span class="number">1</span>, <span class="number">1</span>, n, y1, y2);</div><div class="line">    MID;</div><div class="line">    <span class="keyword">return</span> query(lson, l, m, ql, qr, y1, y2) + query(rson, m + <span class="number">1</span>, r, ql, qr, y1, y2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">int</span> Case = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        Case++;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, Case);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="keyword">int</span> a;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</div><div class="line">                Modify(i, j, a);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="keyword">int</span> x, y, L;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span> (q--) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;L);</div><div class="line">            <span class="keyword">int</span> x1 = max(x - L / <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> x2 = min(x + L / <span class="number">2</span>, n);</div><div class="line">            <span class="keyword">int</span> y1 = max(y - L / <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> y2 = min(y + L / <span class="number">2</span>, n);</div><div class="line">            Nodey ans = query(<span class="number">1</span>, <span class="number">1</span>, n, x1, x2, y1, y2);</div><div class="line">            <span class="keyword">int</span> t = (ans.Max + ans.Min) / <span class="number">2</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t);</div><div class="line">            Modify(x, y, t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>晚上模拟赛的题，感觉是一个二维线段树的裸题，但是不会，马上要去CCPC秦皇岛了，现学的。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/27/HDU4819-Mosaic%EF%BC%88%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8D%95%E7%82%B9%E6%9B%B4%E6%96%B0%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2-%E6%A8%A1%E6%9D%BF%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CCPC2017哈理工比赛总结</title>
      <link>https://li-fish.github.io/2017/10/24/CCPC2017%E5%93%88%E7%90%86%E5%B7%A5%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/10/24/CCPC2017%E5%93%88%E7%90%86%E5%B7%A5%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Tue, 24 Oct 2017 12:54:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;算是第一次参加的区域赛，老师又让写一份总结，于是凑一块写在这里好了。&lt;/p&gt;
&lt;h1 id=&quot;经历&quot;&gt;&lt;a href=&quot;#经历&quot; class
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算是第一次参加的区域赛，老师又让写一份总结，于是凑一块写在这里好了。</p><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>出发前准备的算是挺充分，当时还一直纠结着哈尔滨冷不冷，要带多厚的衣服过去，最后就随便带了几件，然后出发当天去超市买了一堆的东西，给手机缓存了几部动漫（路人女主，末日时，来自深渊，笨女孩…）。得出经验，只需要提前半小时能够到达火车站就好了。</p><p>在火车上一晚上看完了笨女孩，然后白天的路上看完了末日时。期间还有打打王者荣耀和斗地主，感觉好颓啊，最逗的是一个别的队的傻子，和我们斗地主积分输成负的时候，就要清理下手机的数据，重新变成1000分。路上还算是挺好的，不过一天三顿吃泡面有点绝望，发现买的零食都不怎么好吃。另外值得一提的就是路上遇到了一个别人家的熊孩子，特别烦。</p><p>到了哈尔滨刚下车也不算太冷，在火车站刚下车就见识到了东北的民风彪悍，门卫大爷开玩笑都是 “你过来，看我不揍你！”。然后晚上就搭车去旅馆了，还算是顺利。（不过我们的房间厕所没有门是几个意思啊？！）</p><p>晚上一起去吃了夜宵（算是？），没好吃的然后回宿舍订了外卖，发现外卖能直接送到酒店的房间里，体验贼好！</p><p>第二天睡到了九点半（晚上终末少女的旅行更新了，然后看了一集），发现步行只需要半小时就到学校了，报名领取发票也挺顺利的，然后在门外的牌子前面合影就去吃饭了。伙食感觉还行，至少有不少肉，能吃饱…米饭给的是有点少。</p><p>下午就是一个关于游戏开发的演讲，然后不知不觉的睡着了…</p><p>回去的时候就没什么意思了，因为时间问题结果没去成中央大街，只买了点超市里散卖的红肠。</p><h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><p>热身赛的时候前两题出的是比较顺的，我强行要攒人品，然后全场第一发的WA是我交的，然后测了测Java后，把所有题都WA了一发。然后就开始认真出题了，第一题就是个暴力，然后另一个是猜结论，我还强行打了一个表，最后没出B题有点可惜，赛后我还以为是要用线段树进行区间加，后来看大佬们的解释，发现改一下递推的方式就可以用前缀和优化掉了。</p><p>之后是正式赛，第一题，一个平时随手切的水题，比赛的时候居然卡了接近半小时，然后第二题也不算太难，卡了两个小时，最后吃午饭的时候讨论了下才A出来，可以说是相当绝望了，排名一直在100左右，觉得已经凉了，最后两个小时也没有出题。</p><p>不过最后的时候，居然能有铜牌，当时就很开心了，觉得打的这么差居然还有个牌子…</p><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>可能是第一次参加区域赛，状态不是很好，比赛也缺乏一些讨论，好多题型没见过，比如热身赛的DP用前缀和优化，之前没见过…</p><p>还有好多题都是没用到复杂的数据结构算法，都是需要一些思维和技巧的题，感觉之后还是要加大点刷题量，多学一点套路和技巧，多打打CF。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/24/CCPC2017%E5%93%88%E7%90%86%E5%B7%A5%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
<<<<<<< HEAD
    <item>
      <title>2-SAT问题（模板）</title>
      <link>https://li-fish.github.io/2017/10/18/2-SAT%E9%97%AE%E9%A2%98%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/18/2-SAT%E9%97%AE%E9%A2%98%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</guid>
      <pubDate>Wed, 18 Oct 2017 01:32:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;2-SAT （&lt;a href=&quot;https://en.wikipedia.org/wiki/2-satisfiability&quot; target
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>2-SAT （<a href="https://en.wikipedia.org/wiki/2-satisfiability" target="_blank" rel="external">2-satisfiability</a>）是描述一个这样的问题，有 n 个 bool 变量 $x_i$，并且有 m 个需要满足的条件，比如： “$x_1$为真或$x_2$为假”，“ $x_1$ 为真或$x_2$为真”之类的条件，这里”或“是指两个条件中至少有一个为真。SAT的问题是确定这 n 个变量的值，使得满足所有的条件。</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>以下主要参考<a href="https://blog.sengxian.com/algorithms/2-sat" target="_blank" rel="external">Sengxian’s Blog</a>和刘汝佳的白书。</p><p>有一个比较容易理解的解法，首先将每一个变量当成两个图中的顶点，比如 $x_i$ 拆成 $2i$ 和 $2i + 1$ 两个节点，分表表示 $x_i$ 为假和真。比如标记了 $2i + 1$ 这个节点表示 $x_i$ 这个变量为真，如果标记了 $2i $ 则表示 $x_i$ 为假。</p><p>对于 “$x_i$ 为真或 $x_j$ 为假”这个条件，我们添加一条 $2i$ 到 $2j$ 的边，表示如果 $x_i$ 为假的话，那么要使得条件成立 $x_j$ 一定要为假。另外同理也要添加一条 $2j + 1$ 到 $2i + 1$的边。注意上面的都是有向边，这里的边可以当做逻辑上的推导出的意思。</p><p>这样根据上面建完图后，接下来逐一考虑没有标记的变量，设为 $x_i$。我们先假定它为假，然后标记节点 $2i$，并且沿着有向边标记所有能标记的节点。如果标记过程中发现某个变量所对应的两个节点都被标记了，则 “ $x_i$ 为假” 这个假定不成立，需要改成 “ $x_i$ 为真”，然后退回到标记 “ $x_i$ 为假” 之前的状态，重新操作。注意，如果当前考虑的变量不管是真是假都会引起矛盾，可以证明整个 2-SAT 问题无解（即使调整以前赋值的其他变量都没用），所以这个算法是没有回溯过程的，这样最差的复杂度是 $O(N \cdot M)$。</p><p>其实对于 2-SAT 问题还 $O(M)$ 的算法，不过对于 2-SAT 问题一般是考的建图方式，不卡时间，这里给出几个链接：</p><ul><li><a href="http://blog.csdn.net/hqd_acm/article/details/5881655" target="_blank" rel="external">http://blog.csdn.net/hqd_acm/article/details/5881655</a></li><li><a href="http://www.cppblog.com/MatoNo1/archive/2015/12/29/150766.html" target="_blank" rel="external">http://www.cppblog.com/MatoNo1/archive/2015/12/29/150766.html</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TwoSat</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX_NODE = <span class="number">1000</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_NODE];</div><div class="line">    <span class="keyword">int</span> n, stk[MAX_NODE], sz;</div><div class="line">    <span class="keyword">bool</span> mark[MAX_NODE];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; ++i) G[i].clear();</div><div class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addClause</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> xVal, <span class="keyword">int</span> y, <span class="keyword">int</span> yVal)</span> </span>&#123;</div><div class="line">        x = x * <span class="number">2</span> + xVal, y = y * <span class="number">2</span> + yVal;</div><div class="line">        G[x ^ <span class="number">1</span>].push_back(y);</div><div class="line">        G[y ^ <span class="number">1</span>].push_back(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mark[x ^ <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (mark[x]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        stk[sz++] = x;</div><div class="line">        mark[x] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[x].size(); ++i)</div><div class="line">            <span class="keyword">if</span> (!dfs(G[x][i])) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i += <span class="number">2</span>)</div><div class="line">            <span class="keyword">if</span> (!mark[i] &amp;&amp; !mark[i ^ <span class="number">1</span>]) &#123;</div><div class="line">                sz = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (!dfs(i)) &#123;</div><div class="line">                    <span class="keyword">while</span> (sz &gt; <span class="number">0</span>) mark[stk[--sz]] = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">if</span> (!dfs(i ^ <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>上面描述的条件都只是 “或”，即是两个之中有一个成立，这里可以通过多个“或”条件的组合产生其他的逻辑条件。</p><table><thead><tr><th>条件</th><th>转化</th><th>实现</th></tr></thead><tbody><tr><td>$a=b$</td><td>$a \vee \lnot b \bigwedge \lnot a \vee b  $</td><td>add_clause(a, 1, b, 0); add_clause(a, 0, b, 1);</td></tr><tr><td>$a \neq b$</td><td>$a \vee b \bigwedge \lnot a \vee \lnot b$</td><td>add_clause(a, 0, b, 0); add_clause(a, 1, b, 1);</td></tr><tr><td>$a = b = true$</td><td>$a \vee \lnot b \bigwedge \lnot a \vee b  \bigwedge a \vee b$</td><td>add_clause(a, 1, b, 1); add_clause(a, 1, b, 0); add_clause(a, 0, b, 1);</td></tr><tr><td>$a = b = false$</td><td>$a \vee \lnot b \bigwedge \lnot a \vee b  \bigwedge \lnot a \vee  \lnot b$</td><td>add_clause(a, 0, b, 0); add_clause(a, 1, b, 0); add_clause(a, 0, b, 1);</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/18/2-SAT%E9%97%AE%E9%A2%98%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>URAL1183 - Brackets Sequence（区间DP）</title>
      <link>https://li-fish.github.io/2017/10/16/URAL1183-Brackets-Sequence%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/16/URAL1183-Brackets-Sequence%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/</guid>
      <pubDate>Mon, 16 Oct 2017 01:01:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1183" target="_blank" rel="external">http://acm.timus.ru/problem.aspx?space=1&amp;num=1183</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p><a href="http://blog.csdn.net/jiange_zh/article/details/49994207" target="_blank" rel="external">参考博客</a></p><blockquote><p>定义正规的括号序列如下: </p><ol><li>空序列是一个正规的括号序列 </li><li>如果S是一个正规的括号序列, 那么(S) 和[S] 也都是正规的括号序列。 </li><li>如果A和B是正规的括号序列, 那么AB也是一个正规的括号序列。 </li></ol><p>现给定一个括号序列A（只包含小括号和中括号，可能为空序列），求一个正规括号序列B，使得A包含于B，而且B的长度是满足条件的序列中最小的。</p></blockquote><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>设 $dp[i][j]$ 为使得 [i, j] 这段区间括号匹配所需要的最小花费，那么根据题意，$dp[i][j]$可由两种方式转移而来：</p><ul><li>如果 i 与 j 可以匹配的话$dp[i][j] = dp[i + 1][j - 1]$</li><li>不关 i 与 j 是否匹配 $dp[i][k] = dp[i][k] + dp[k + 1][j]$</li></ul><p>最后递归的打印答案，转移的时候标记一下，当前是否分为两个子序列。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[<span class="number">1123</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[<span class="number">112</span>][<span class="number">112</span>];</div><div class="line"><span class="keyword">int</span> mark[<span class="number">112</span>][<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        <span class="keyword">if</span> (s[l] == <span class="string">'('</span> || s[l] == <span class="string">')'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"()"</span>;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"[]"</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mark[l][r] == <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (s[l] == <span class="string">'('</span>) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</div><div class="line">            print(l + <span class="number">1</span>, r - <span class="number">1</span>);</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span>;</div><div class="line">            print(l + <span class="number">1</span>, r - <span class="number">1</span>);</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"]"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        print(l, mark[l][r]);</div><div class="line">        print(mark[l][r] + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    gets(s + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (!n) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dp[i][i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>; l &lt;= n; l++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = i + l - <span class="number">1</span>;</div><div class="line">            dp[i][j] = INF;</div><div class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'('</span> &amp;&amp; s[j] == <span class="string">')'</span> || s[i] == <span class="string">'['</span> &amp;&amp; s[j] == <span class="string">']'</span>) &#123;</div><div class="line">                dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][j - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">            mark[i][j] = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++) &#123;</div><div class="line">                <span class="keyword">if</span> (dp[i][k] + dp[k + <span class="number">1</span>][j] &lt; dp[i][j]) &#123;</div><div class="line">                    dp[i][j] = dp[i][k] + dp[k + <span class="number">1</span>][j];</div><div class="line">                    mark[i][j] = k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    print(<span class="number">1</span>, n);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>这题卡了好久ORZ，之前了解过一点区间DP，结果还是不会做。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/16/URAL1183-Brackets-Sequence%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HihoCoder1424 - Asa&#39;s Chess Problem（有上下流量限制的费用流）</title>
      <link>https://li-fish.github.io/2017/10/16/HihoCoder1424-Asa-s-Chess-Problem%EF%BC%88%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6%E7%9A%84%E8%B4%B9%E7%94%A8%E6%B5%81%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/16/HihoCoder1424-Asa-s-Chess-Problem%EF%BC%88%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6%E7%9A%84%E8%B4%B9%E7%94%A8%E6%B5%81%EF%BC%89/</guid>
      <pubDate>Sun, 15 Oct 2017 23:53:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/HihoCoder-1424&quot; target
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="https://vjudge.net/problem/HihoCoder-1424" target="_blank" rel="external">https://vjudge.net/problem/HihoCoder-1424</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>参考 <a href="http://www.cnblogs.com/flipped/p/7635420.html" target="_blank" rel="external">http://www.cnblogs.com/flipped/p/7635420.html</a></p><blockquote><p>有个 N×N 的棋盘，告诉你每个格子黑色(1)或白色(0)，以及每对能相互交换的同行或同列格子，每个格子只在一对中，即共有N×N/2对。求最少交换次数使得每行每列的黑格子总数满足给出的上下范围：若最终第i行,第j列分别有R[i],C[j]个黑格子，那么需要让Rl[i]≤R[i]≤Rh[i],Cl[j]≤C[i]≤Ch[j]。</p></blockquote><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>这里先介绍一种有流量下限限制的建图方式，参考<a href="http://www.cnblogs.com/kane0526/archive/2013/04/05/3001108.html" target="_blank" rel="external">这个博客</a>。</p><p>记节点 i 所有流入的流量下限和为 in[i]，所有的流出流入和下限为 out[i]，建一个超级源点 SS，超级汇点 ST。</p><p>如果一个节点 in[i] &gt; out[i]，那么建一条 SS 到 i 的边，流量为 in[i] - out[i]。</p><p>如果 in[i] &lt; out[i]，那么建一条 i 到 ST 的边，流量为 out[i] - in[i]。</p><p>对于无源汇的图来说，上面从 SS 到 ST跑一个最大流，如果上面的从 SS 出发的附加边满流，当前就是一个可行流，否则无解。</p><p>对于有源汇的图来说，需要从 T 到 S 连一条流量为无穷的边，然后再从 SS 到 ST 跑最大流。 </p><p>对于这个题，设每一行每一列原有的黑色棋子数量为 R[i] 和 C[i]。</p><ul><li>首先从 S 到每一行每一列建一条上下限均为 R[i] 或 C[i] 的边</li><li>每一行每一列对 T 建边，容量上下限为 Rl[i]， Rh[i] 或 Cl[i]，Ch[i]</li><li>然后对于可以交换的棋子，如果他们颜色相同，那么不需要建边，否则如果列相同，黑色所在的行向白色棋子所在的行建流量下限为 0 上限为 1 费用为 1 的边，列相同类似</li><li>从 t 到 s 建一条流量下限为 0，上限为无穷的边。</li></ul><p>上述所有边默认费用为 0 。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">600</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> data[<span class="number">112</span>][<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, c, w, nxt;</div><div class="line">&#125; edge[MAX * MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAX], etot;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[<span class="number">112</span>], out[<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> low, <span class="keyword">int</span> up, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    edge[etot].u = u;</div><div class="line">    edge[etot].v = v;</div><div class="line">    edge[etot].c = up - low;</div><div class="line">    edge[etot].w = w;</div><div class="line">    edge[etot].nxt = head[u];</div><div class="line">    head[u] = etot++;</div><div class="line"></div><div class="line">    out[u] += low;</div><div class="line"></div><div class="line">    edge[etot].u = v;</div><div class="line">    edge[etot].v = u;</div><div class="line">    edge[etot].c = <span class="number">0</span>;</div><div class="line">    edge[etot].w = -w;</div><div class="line">    edge[etot].nxt = head[v];</div><div class="line">    head[v] = etot++;</div><div class="line"></div><div class="line">    in[v] += low;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dist[MAX], vis[MAX], pre[MAX], flow[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    flow[s] = <span class="number">1e9</span>;</div><div class="line">    vis[s] = <span class="number">1</span>;</div><div class="line">    dist[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">            Edge &amp;e = edge[i];</div><div class="line">            <span class="keyword">if</span> (edge[i].c &gt; <span class="number">0</span> &amp;&amp; dist[e.v] &gt; dist[e.u] + e.w) &#123;</div><div class="line">                dist[e.v] = dist[e.u] + e.w;</div><div class="line">                pre[e.v] = i;</div><div class="line">                flow[e.v] = min(flow[e.u], e.c);</div><div class="line">                <span class="keyword">if</span> (!vis[e.v]) &#123;</div><div class="line">                    vis[e.v] = <span class="literal">true</span>;</div><div class="line">                    q.push(e.v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; min_cost_flow(<span class="keyword">int</span> s, <span class="keyword">int</span> e) &#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>, total = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        spfa(s);</div><div class="line">        <span class="keyword">if</span> (dist[e] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> d = flow[e], u = e;</div><div class="line">        total += d;</div><div class="line">        rst += dist[e] * d;</div><div class="line">        <span class="keyword">while</span> (u != s) &#123;</div><div class="line">            <span class="keyword">int</span> last = pre[u];</div><div class="line">            edge[last].c -= d;</div><div class="line">            edge[last ^ <span class="number">1</span>].c += d;</div><div class="line">            u = edge[last].u;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> make_pair(total, rst);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> Rl[<span class="number">112</span>], Rh[<span class="number">112</span>], Cl[<span class="number">112</span>], Ch[<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> row[<span class="number">112</span>], col[<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line"></div><div class="line">        etot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="built_in">memset</span>(col, <span class="number">0</span>, <span class="keyword">sizeof</span>(col));</div><div class="line">        <span class="built_in">memset</span>(row, <span class="number">0</span>, <span class="keyword">sizeof</span>(row));</div><div class="line">        <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</div><div class="line">        <span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(out));</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//源点，汇点，超级源点，超级汇点</span></div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> e = n * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ss = e + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> se = ss + <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i][j]);</div><div class="line">                row[i] += data[i][j];</div><div class="line">                col[j] += data[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;Rl[i], &amp;Rh[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;Cl[i], &amp;Ch[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            add_edge(s, i, row[i], row[i], <span class="number">0</span>);</div><div class="line">            add_edge(s, i + n, col[i], col[i], <span class="number">0</span>);</div><div class="line">            add_edge(i, e, Rl[i], Rh[i], <span class="number">0</span>);</div><div class="line">            add_edge(i + n, e, Cl[i], Ch[i], <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * n / <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> x1, y1, x2, y2;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</div><div class="line">            <span class="keyword">if</span> (data[x1][y1] == data[x2][y2]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (data[x1][y1] == <span class="number">0</span>) swap(x1, x2), swap(y1, y2);</div><div class="line">            <span class="keyword">if</span> (x1 == x2) &#123;</div><div class="line">                add_edge(n + y1, n + y2, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y1 == y2) &#123;</div><div class="line">                add_edge(x1, x2, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        add_edge(e, s, <span class="number">0</span>, <span class="number">1e9</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//对超级源点，超级汇点建边</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + n + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> t = in[i] - out[i];</div><div class="line">            <span class="keyword">if</span> (t &lt; <span class="number">0</span>) &#123;</div><div class="line">                t = -t;</div><div class="line">                add_edge(i, se, <span class="number">0</span>, t, <span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                sum += t;</div><div class="line">                add_edge(ss, i, <span class="number">0</span>, t, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = min_cost_flow(ss, se);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ans.first != sum) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.second);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>这个题感觉也不是很难，感觉应该做出来的，关键是比赛的时候漏看了一个条件，只有列或行相同时才可以交换，如果没有这个条件建图就复杂了，当时也想麻烦了。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/16/HihoCoder1424-Asa-s-Chess-Problem%EF%BC%88%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6%E7%9A%84%E8%B4%B9%E7%94%A8%E6%B5%81%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CodeForces732F - Tourist Reform（边双连通 + DFS）</title>
      <link>https://li-fish.github.io/2017/10/15/CodeForces732F-Tourist-Reform%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A-DFS%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/15/CodeForces732F-Tourist-Reform%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A-DFS%EF%BC%89/</guid>
      <pubDate>Sun, 15 Oct 2017 04:33:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/732/problem/F&quot; targ
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://codeforces.com/contest/732/problem/F" target="_blank" rel="external">http://codeforces.com/contest/732/problem/F</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一张 n 个顶点， m 条边的无向图，保证图连通，没有重边，现在给每个边加上方向，记从点 i 出发可以访问到的点的数量为 $r_i$，求一种分配方向的方式，使得最小的 $r_i$ 尽量的大。</p><p>$2 \le n \le 400000, 1 \le m \le 400000$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>这里就引用下 <a href="https://blog.sengxian.com/solutions/cf-732f" target="_blank" rel="external">dalao的博客</a>:</p><blockquote><p>我们考虑如何将边定向，定向成 DAG 肯定是极不好的，因为 DAG 里边存在没有出度的点，而这样的话，答案就必然为 1 了。也就是说，不能出去的点，最好要形成一个环，这样答案就是环的大小了。</p><p>将图分解为若干边-双连通分量，将每个边-双连通分量看作一个点，那么此时形成了一棵缩点树。对于每个边-双连通分量，我们可以将里边的边定向，使之成为强联通分量。再将缩点后的树边定向，成为一个边指向根的树形图，这样答案就是根代表的边-双连通分量的答案，由于任意点都可以做树形图的根，所以答案就是最大的边-双连通分量的大小。</p><p><strong>定理：</strong>答案就是是最大的边-双连通分量的大小。<br><strong>证明：</strong>前面已经证明了，最大的边-双连通分量的大小是一个合法答案。现在只需证明，最大的答案不会大于最大的边-双连通分量的大小：考虑定向后的图，将其强联通缩点，答案就是没有出度的强联通分量中最小的那个，如果这个值比最大的边-双连通分量的大小更大，那么考虑将这个强联通分量中的边改为无向边，这就能形成一个边-双连通分量，而且比原图中最大的边-双连通分量的大小还要大，这就产生了矛盾。</p><p>考虑输出方案，树边是很好定向的，DFS 一下缩点树就行了。如何将边-双连通分量中的边定向，使得形成一个强联通分量呢？我们考虑直接使用 DFS 中第一次访问边的顺序，为什么？因为利用这个顺序，肯定能保证联通。我们再考虑 DFS 树，在 DFS 树中，每个点一定能通过 DFS 返祖边和非返祖边的结合，走到自己上方的点（否则存在桥，与边-双连通的定义违背），所以每个点都可以通过定向后的边走到根，自然证明这个原先的边-双连通分量通过这种定向方法后强联通。</p></blockquote><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">4112345</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, nxt;</div><div class="line">&#125; edge[MAX &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAX], ecnt;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfs_clock, scc_cnt;</div><div class="line"><span class="keyword">int</span> low[MAX], pre[MAX], mark[MAX];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[MAX], ans, id;</div><div class="line"><span class="keyword">int</span> data[MAX][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    edge[ecnt].u = u;</div><div class="line">    edge[ecnt].v = v;</div><div class="line">    edge[ecnt].nxt = head[u];</div><div class="line">    head[u] = ecnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    dfs_clock = scc_cnt = ecnt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;data[i][<span class="number">0</span>], &amp;data[i][<span class="number">1</span>]);</div><div class="line">        add_edge(data[i][<span class="number">0</span>], data[i][<span class="number">1</span>]);</div><div class="line">        add_edge(data[i][<span class="number">1</span>], data[i][<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    low[u] = pre[u] = ++dfs_clock;</div><div class="line">    S.push(u);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!pre[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!mark[v]) &#123;</div><div class="line">            low[u] = min(low[u], pre[v]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (pre[u] == low[u]) &#123;</div><div class="line">        scc_cnt++;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            x = S.top();</div><div class="line">            S.pop();</div><div class="line">            mark[x] = scc_cnt;</div><div class="line">            num[scc_cnt]++;</div><div class="line">            <span class="keyword">if</span> (num[scc_cnt] &gt; ans) &#123;</div><div class="line">                ans = num[scc_cnt];</div><div class="line">                id = u;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span> (x != u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[MAX];</div><div class="line"><span class="keyword">int</span> fa[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    fa[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span> (vis[i / <span class="number">2</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (mark[v] != mark[u]) <span class="keyword">continue</span>;</div><div class="line">        vis[i / <span class="number">2</span>] = <span class="literal">true</span>;</div><div class="line">        data[i / <span class="number">2</span>][<span class="number">0</span>] = u;</div><div class="line">        data[i / <span class="number">2</span>][<span class="number">1</span>] = v;</div><div class="line">        <span class="keyword">if</span> (fa[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="comment">//这里类似 DFS 一棵树的过程，如果当前双连通分量已经访问过了，那么不应该通过其他强连通分量去访问了</span></div><div class="line">        <span class="keyword">if</span> (mark[v] != mark[u]) &#123;</div><div class="line">            <span class="keyword">if</span> (fa[mark[v]] == <span class="number">0</span> || fa[mark[v]] == mark[u]) &#123;</div><div class="line">                fa[mark[v]] = mark[u];</div><div class="line">                data[i/<span class="number">2</span>][<span class="number">0</span>] = v;</div><div class="line">                data[i/<span class="number">2</span>][<span class="number">1</span>] = u;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="comment">//第一次 DFS 为双连通分量里面的边分配方向</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        dfs1(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//第二次为连接不同的双连通分量的边分配方向</span></div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</div><div class="line">    fa[mark[id]] = <span class="number">-1</span>;</div><div class="line">    dfs2(id);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, data[i][<span class="number">0</span>], data[i][<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    solve();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>这题卡了好久，主要是为缩点后的图重新建边后会爆内存，然后只能用第一次建的边去 DFS，然后就写的有点恶心了…</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/15/CodeForces732F-Tourist-Reform%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A-DFS%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>URAL1167 - Bicolored Horses（DP）</title>
      <link>https://li-fish.github.io/2017/10/12/URAL1167-Bicolored-Horses%EF%BC%88DP%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/12/URAL1167-Bicolored-Horses%EF%BC%88DP%EF%BC%89/</guid>
      <pubDate>Thu, 12 Oct 2017 01:11:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1167" target="_blank" rel="external">http://acm.timus.ru/problem.aspx?space=1&amp;num=1167</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一段 0 和 1 的串，要求将其划分成 k 个连续的部分（一定要划分成 k 个连续的部分，并且某一部分不能为 0，任一 0 或 1 一定要分到一分组里），记某一分组有 i 个 0 和 j 个 1，那么这一组的值为 $i \cdot j$ ，现在要求划分 k 组，使得这 k 组的值和最小，输出最小值。</p><p>$1 \le N \le 500, 1\le K \le N$</p><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>先是从四维降到了三维，然后还是 MLE，最后类比了一下 M 子段和的题，还是不对，然后翻的别人博客，看到状态转移方程后感觉好像也不是太难…</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>设 $dp[i][j]$ 的含义是划分了前 i 组以第 j 个元素为结尾的最小值。</p><p>那么状态转移方程是:</p><p>$$dp[i][j] = min(dp[i - 1][k] + v | k = 0 \dots j - 1)$$</p><p>含义是，因为分组是连续的第 i 组以 j 结尾可以枚举第 i - 1 组以谁结尾来转移。</p><p>这里的 v 是前缀和，含义是 $[k + 1 , j]$ 这段区间的值。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">500</span> + <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[MAX][MAX];</div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"><span class="keyword">int</span> one[MAX];</div><div class="line"><span class="keyword">int</span> zero[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        <span class="built_in">memset</span>(zero, <span class="number">0</span>, <span class="keyword">sizeof</span>(zero));</div><div class="line">        <span class="built_in">memset</span>(one, <span class="number">0</span>, <span class="keyword">sizeof</span>(one));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, data + i);</div><div class="line">            <span class="keyword">if</span> (data[i]) one[i] += <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> zero[i] += <span class="number">1</span>;</div><div class="line">            one[i] += one[i - <span class="number">1</span>];</div><div class="line">            zero[i] += zero[i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &lt; j; k++) &#123;</div><div class="line">                    <span class="keyword">int</span> v;</div><div class="line">                    v = zero[j] - zero[k];</div><div class="line">                    v *= one[j] - one[k];</div><div class="line">                    dp[i][j] = min(dp[i - <span class="number">1</span>][k] + v, dp[i][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[m][n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/12/URAL1167-Bicolored-Horses%EF%BC%88DP%EF%BC%89/#disqus_thread</comments>
    </item>
    
=======
>>>>>>> ced470192faae13e215fb3b57e28efad2f01fa7f
  </channel>
</rss>
