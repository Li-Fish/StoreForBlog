<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Fish&#39;s Blog</title>
    <link>https://li-fish.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 31 Oct 2017 13:19:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>51nod1378 - 夹克老爷的愤怒（树型DP+贪心）</title>
      <link>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/</guid>
      <pubDate>Tue, 31 Oct 2017 12:51:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.htm
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1378" target="_blank" rel="external">http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1378</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一张 N 个节点树形图，从中选若干个节点，使得途中任一节点距离最近的选中节点的距离不超过 K。</p><p>$1\le N\le 1e5, 0 \le K \le N$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>树型DP，贪心的放，刚开始对于一颗子树，如果深度等于 K 那么肯定选中这颗子树的根节点。这时候这个选中的节点不仅对子孙节点有贡献，还对祖先或兄弟节点有贡献，这时候我们用一个数组 DP[i] 记录某个点可以做出多少贡献，或一个点需要多少的贡献。</p><p>比如选中了 u 节点，那么他具有 k 的贡献，他的父亲和孩子都有 k - 1的贡献。对于一个叶子节点视它为 0 点贡献，那么他的祖先就需要 -1 点贡献。</p><p>对于每个节点需要维护的是一颗子树的信息，要满足以它为根的子树里面的所有节点的需求。</p><p>通过以下方式进行转移：</p><p><code>minn = min(dp[child]), maxn = max(dp[child]);</code></p><p>如果当前节点为叶子节点，那么 <code>minn = maxn = 0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if minn &lt;= -k#这时 u 的子树中已经有一个节点需求为 -k，如果不选中当前节点肯定无解</div><div class="line">    dp[u] = k, ans++</div><div class="line">else if maxn + minn &gt; 0#这时 u 的子树中有一个节点的贡献可以满足其他节点的需求</div><div class="line">    dp[u] = maxn - 1</div><div class="line">else #如果不满足这两种情况，那么贪心的想，需求向祖先节点需求</div><div class="line">dp[u] = minn - 1</div></pre></td></tr></table></figure><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100000</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minn = INF;</div><div class="line">    <span class="keyword">int</span> maxn = -INF;</div><div class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : edge[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        dfs(v, u);</div><div class="line">        ok = <span class="literal">true</span>;</div><div class="line">        minn = min(dp[v], minn);</div><div class="line">        maxn = max(dp[v], maxn);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!ok) maxn = minn = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (minn &lt;= -k) dp[u] = k, ans++;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (maxn + minn &gt; <span class="number">0</span>) dp[u] = maxn - <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> dp[u] = minn - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</div><div class="line">        edge[u].push_back(v);</div><div class="line">        edge[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (dp[<span class="number">0</span>] &lt; <span class="number">0</span>) ans++;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>在白书上看到了一个类似的题，然后扩展了一下，去群里问了下做法，感觉应该是很经典的题，然后人形题库 qls 就给出 51nod 上的原题，于是就补了一下。还是有一个坑点的，如果直接不考虑叶子节点的话，对于 k = 0 的情况需要特判。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/31/51nod1378-%E5%A4%B9%E5%85%8B%E8%80%81%E7%88%B7%E7%9A%84%E6%84%A4%E6%80%92%EF%BC%88%E6%A0%91%E5%9E%8BDP-%E8%B4%AA%E5%BF%83%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU4819 - Mosaic（二维线段树-单点更新区间查询 + 模板）</title>
      <link>https://li-fish.github.io/2017/10/27/HDU4819-Mosaic%EF%BC%88%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8D%95%E7%82%B9%E6%9B%B4%E6%96%B0%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2-%E6%A8%A1%E6%9D%BF%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/27/HDU4819-Mosaic%EF%BC%88%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8D%95%E7%82%B9%E6%9B%B4%E6%96%B0%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2-%E6%A8%A1%E6%9D%BF%EF%BC%89/</guid>
      <pubDate>Fri, 27 Oct 2017 10:11:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/HDU-4819&quot; target=&quot;_bla
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="https://vjudge.net/problem/HDU-4819" target="_blank" rel="external">https://vjudge.net/problem/HDU-4819</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一个 n <em> n 的矩阵，每个位置有一个整数值。进行 q 次操作，每次选矩阵的一个元素为中心，取以这个元素为中心的 L </em> L 的最大值和最小值，将这个元素的值赋值成最大值最小值的平均值。</p><p>$n \le 800, q \le 100000$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>裸的二维线段树，单点修改，询问区间最值。</p><p>其实二维的线段树就是一个行线段树套列线段树，注意进行更新的时候，不能直接赋值修改，只修改行线段树叶子节点里面列线段树的叶子节点，然后向上合并。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1010</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson o&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson o&lt;&lt;1|1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MID int m = (l + r) &gt;&gt; 1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//列线段树，用来维护列的节点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Nodey</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> Max, Min;</div><div class="line"></div><div class="line">    Nodey <span class="keyword">operator</span>+(<span class="keyword">const</span> struct Nodey &amp;t) &#123;</div><div class="line">        Nodey rst;</div><div class="line">        rst.Max = max(Max, t.Max);</div><div class="line">        rst.Min = min(Min, t.Min);</div><div class="line">        <span class="keyword">return</span> rst;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> locy[MAX], locx[MAX];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//行线段树，用来维护行的节点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Nodex</span> &#123;</span></div><div class="line">    Nodey sty[MAX &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        sty[o].Max = -INF;</div><div class="line">        sty[o].Min = INF;</div><div class="line">        <span class="keyword">if</span> (l == r) &#123;</div><div class="line">            locy[l] = o;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        MID;</div><div class="line">        build(lson, l, m);</div><div class="line">        build(rson, m + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Nodey <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (qr &lt; l || r &lt; ql) <span class="keyword">return</span> (Nodey) &#123;-INF, INF&#125;;</div><div class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> sty[o];</div><div class="line">        MID;</div><div class="line">        <span class="keyword">return</span> query(lson, l, m, ql, qr) + query(rson, m + <span class="number">1</span>, r, ql, qr);</div><div class="line">    &#125;</div><div class="line">&#125; stx[MAX &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    stx[o].build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        locx[l] = o;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    MID;</div><div class="line">    build(lson, l, m);</div><div class="line">    build(rson, m + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//进行单点更新，这里首先更新了叶子节点，然后向上合并父亲节点；</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tx = locx[x];</div><div class="line">    <span class="keyword">int</span> ty = locx[y];</div><div class="line">    stx[tx].sty[ty].Min = stx[tx].sty[ty].Max = val;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tx; i; i &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = ty; j; j &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (i == tx &amp;&amp; j == ty) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (j == ty) &#123;</div><div class="line">                <span class="comment">//如果当前更新的列就是需要更新的叶子节点，那么由当前行的两个儿子节点来更新信息</span></div><div class="line">                stx[i].sty[j] = stx[i &lt;&lt; <span class="number">1</span>].sty[j] + stx[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sty[j];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//否则由当前列的如果儿子节点来更新</span></div><div class="line">                stx[i].sty[j] = stx[i].sty[j &lt;&lt; <span class="number">1</span>] +  stx[i].sty[j &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Nodey <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> y1, <span class="keyword">int</span> y2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (qr &lt; l || r &lt; ql) <span class="keyword">return</span> (Nodey) &#123;-INF, INF&#125;;</div><div class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> stx[o].query(<span class="number">1</span>, <span class="number">1</span>, n, y1, y2);</div><div class="line">    MID;</div><div class="line">    <span class="keyword">return</span> query(lson, l, m, ql, qr, y1, y2) + query(rson, m + <span class="number">1</span>, r, ql, qr, y1, y2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">int</span> Case = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        Case++;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, Case);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="keyword">int</span> a;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</div><div class="line">                Modify(i, j, a);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="keyword">int</span> x, y, L;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span> (q--) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;L);</div><div class="line">            <span class="keyword">int</span> x1 = max(x - L / <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> x2 = min(x + L / <span class="number">2</span>, n);</div><div class="line">            <span class="keyword">int</span> y1 = max(y - L / <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> y2 = min(y + L / <span class="number">2</span>, n);</div><div class="line">            Nodey ans = query(<span class="number">1</span>, <span class="number">1</span>, n, x1, x2, y1, y2);</div><div class="line">            <span class="keyword">int</span> t = (ans.Max + ans.Min) / <span class="number">2</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t);</div><div class="line">            Modify(x, y, t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>晚上模拟赛的题，感觉是一个二维线段树的裸题，但是不会，马上要去CCPC秦皇岛了，现学的。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/27/HDU4819-Mosaic%EF%BC%88%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8D%95%E7%82%B9%E6%9B%B4%E6%96%B0%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2-%E6%A8%A1%E6%9D%BF%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CCPC2017哈理工比赛总结</title>
      <link>https://li-fish.github.io/2017/10/24/CCPC2017%E5%93%88%E7%90%86%E5%B7%A5%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/10/24/CCPC2017%E5%93%88%E7%90%86%E5%B7%A5%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Tue, 24 Oct 2017 12:54:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;算是第一次参加的区域赛，老师又让写一份总结，于是凑一块写在这里好了。&lt;/p&gt;
&lt;h1 id=&quot;经历&quot;&gt;&lt;a href=&quot;#经历&quot; class
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算是第一次参加的区域赛，老师又让写一份总结，于是凑一块写在这里好了。</p><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>出发前准备的算是挺充分，当时还一直纠结着哈尔滨冷不冷，要带多厚的衣服过去，最后就随便带了几件，然后出发当天去超市买了一堆的东西，给手机缓存了几部动漫（路人女主，末日时，来自深渊，笨女孩…）。得出经验，只需要提前半小时能够到达火车站就好了。</p><p>在火车上一晚上看完了笨女孩，然后白天的路上看完了末日时。期间还有打打王者荣耀和斗地主，感觉好颓啊，最逗的是一个别的队的傻子，和我们斗地主积分输成负的时候，就要清理下手机的数据，重新变成1000分。路上还算是挺好的，不过一天三顿吃泡面有点绝望，发现买的零食都不怎么好吃。另外值得一提的就是路上遇到了一个别人家的熊孩子，特别烦。</p><p>到了哈尔滨刚下车也不算太冷，在火车站刚下车就见识到了东北的民风彪悍，门卫大爷开玩笑都是 “你过来，看我不揍你！”。然后晚上就搭车去旅馆了，还算是顺利。（不过我们的房间厕所没有门是几个意思啊？！）</p><p>晚上一起去吃了夜宵（算是？），没好吃的然后回宿舍订了外卖，发现外卖能直接送到酒店的房间里，体验贼好！</p><p>第二天睡到了九点半（晚上终末少女的旅行更新了，然后看了一集），发现步行只需要半小时就到学校了，报名领取发票也挺顺利的，然后在门外的牌子前面合影就去吃饭了。伙食感觉还行，至少有不少肉，能吃饱…米饭给的是有点少。</p><p>下午就是一个关于游戏开发的演讲，然后不知不觉的睡着了…</p><p>回去的时候就没什么意思了，因为时间问题结果没去成中央大街，只买了点超市里散卖的红肠。</p><h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><p>热身赛的时候前两题出的是比较顺的，我强行要攒人品，然后全场第一发的WA是我交的，然后测了测Java后，把所有题都WA了一发。然后就开始认真出题了，第一题就是个暴力，然后另一个是猜结论，我还强行打了一个表，最后没出B题有点可惜，赛后我还以为是要用线段树进行区间加，后来看大佬们的解释，发现改一下递推的方式就可以用前缀和优化掉了。</p><p>之后是正式赛，第一题，一个平时随手切的水题，比赛的时候居然卡了接近半小时，然后第二题也不算太难，卡了两个小时，最后吃午饭的时候讨论了下才A出来，可以说是相当绝望了，排名一直在100左右，觉得已经凉了，最后两个小时也没有出题。</p><p>不过最后的时候，居然能有铜牌，当时就很开心了，觉得打的这么差居然还有个牌子…</p><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>可能是第一次参加区域赛，状态不是很好，比赛也缺乏一些讨论，好多题型没见过，比如热身赛的DP用前缀和优化，之前没见过…</p><p>还有好多题都是没用到复杂的数据结构算法，都是需要一些思维和技巧的题，感觉之后还是要加大点刷题量，多学一点套路和技巧，多打打CF。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/24/CCPC2017%E5%93%88%E7%90%86%E5%B7%A5%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2-SAT问题（模板）</title>
      <link>https://li-fish.github.io/2017/10/18/2-SAT%E9%97%AE%E9%A2%98%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/18/2-SAT%E9%97%AE%E9%A2%98%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</guid>
      <pubDate>Wed, 18 Oct 2017 01:32:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;2-SAT （&lt;a href=&quot;https://en.wikipedia.org/wiki/2-satisfiability&quot; target
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>2-SAT （<a href="https://en.wikipedia.org/wiki/2-satisfiability" target="_blank" rel="external">2-satisfiability</a>）是描述一个这样的问题，有 n 个 bool 变量 $x_i$，并且有 m 个需要满足的条件，比如： “$x_1$为真或$x_2$为假”，“ $x_1$ 为真或$x_2$为真”之类的条件，这里”或“是指两个条件中至少有一个为真。SAT的问题是确定这 n 个变量的值，使得满足所有的条件。</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>以下主要参考<a href="https://blog.sengxian.com/algorithms/2-sat" target="_blank" rel="external">Sengxian’s Blog</a>和刘汝佳的白书。</p><p>有一个比较容易理解的解法，首先将每一个变量当成两个图中的顶点，比如 $x_i$ 拆成 $2i$ 和 $2i + 1$ 两个节点，分表表示 $x_i$ 为假和真。比如标记了 $2i + 1$ 这个节点表示 $x_i$ 这个变量为真，如果标记了 $2i $ 则表示 $x_i$ 为假。</p><p>对于 “$x_i$ 为真或 $x_j$ 为假”这个条件，我们添加一条 $2i$ 到 $2j$ 的边，表示如果 $x_i$ 为假的话，那么要使得条件成立 $x_j$ 一定要为假。另外同理也要添加一条 $2j + 1$ 到 $2i + 1$的边。注意上面的都是有向边，这里的边可以当做逻辑上的推导出的意思。</p><p>这样根据上面建完图后，接下来逐一考虑没有标记的变量，设为 $x_i$。我们先假定它为假，然后标记节点 $2i$，并且沿着有向边标记所有能标记的节点。如果标记过程中发现某个变量所对应的两个节点都被标记了，则 “ $x_i$ 为假” 这个假定不成立，需要改成 “ $x_i$ 为真”，然后退回到标记 “ $x_i$ 为假” 之前的状态，重新操作。注意，如果当前考虑的变量不管是真是假都会引起矛盾，可以证明整个 2-SAT 问题无解（即使调整以前赋值的其他变量都没用），所以这个算法是没有回溯过程的，这样最差的复杂度是 $O(N \cdot M)$。</p><p>其实对于 2-SAT 问题还 $O(M)$ 的算法，不过对于 2-SAT 问题一般是考的建图方式，不卡时间，这里给出几个链接：</p><ul><li><a href="http://blog.csdn.net/hqd_acm/article/details/5881655" target="_blank" rel="external">http://blog.csdn.net/hqd_acm/article/details/5881655</a></li><li><a href="http://www.cppblog.com/MatoNo1/archive/2015/12/29/150766.html" target="_blank" rel="external">http://www.cppblog.com/MatoNo1/archive/2015/12/29/150766.html</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TwoSat</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX_NODE = <span class="number">1000</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_NODE];</div><div class="line">    <span class="keyword">int</span> n, stk[MAX_NODE], sz;</div><div class="line">    <span class="keyword">bool</span> mark[MAX_NODE];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; ++i) G[i].clear();</div><div class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addClause</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> xVal, <span class="keyword">int</span> y, <span class="keyword">int</span> yVal)</span> </span>&#123;</div><div class="line">        x = x * <span class="number">2</span> + xVal, y = y * <span class="number">2</span> + yVal;</div><div class="line">        G[x ^ <span class="number">1</span>].push_back(y);</div><div class="line">        G[y ^ <span class="number">1</span>].push_back(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mark[x ^ <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (mark[x]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        stk[sz++] = x;</div><div class="line">        mark[x] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[x].size(); ++i)</div><div class="line">            <span class="keyword">if</span> (!dfs(G[x][i])) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i += <span class="number">2</span>)</div><div class="line">            <span class="keyword">if</span> (!mark[i] &amp;&amp; !mark[i ^ <span class="number">1</span>]) &#123;</div><div class="line">                sz = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (!dfs(i)) &#123;</div><div class="line">                    <span class="keyword">while</span> (sz &gt; <span class="number">0</span>) mark[stk[--sz]] = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">if</span> (!dfs(i ^ <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>上面描述的条件都只是 “或”，即是两个之中有一个成立，这里可以通过多个“或”条件的组合产生其他的逻辑条件。</p><table><thead><tr><th>条件</th><th>转化</th><th>实现</th></tr></thead><tbody><tr><td>$a=b$</td><td>$a \vee \lnot b \bigwedge \lnot a \vee b  $</td><td>add_clause(a, 1, b, 0); add_clause(a, 0, b, 1);</td></tr><tr><td>$a \neq b$</td><td>$a \vee b \bigwedge \lnot a \vee \lnot b$</td><td>add_clause(a, 0, b, 0); add_clause(a, 1, b, 1);</td></tr><tr><td>$a = b = true$</td><td>$a \vee \lnot b \bigwedge \lnot a \vee b  \bigwedge a \vee b$</td><td>add_clause(a, 1, b, 1); add_clause(a, 1, b, 0); add_clause(a, 0, b, 1);</td></tr><tr><td>$a = b = false$</td><td>$a \vee \lnot b \bigwedge \lnot a \vee b  \bigwedge \lnot a \vee  \lnot b$</td><td>add_clause(a, 0, b, 0); add_clause(a, 1, b, 0); add_clause(a, 0, b, 1);</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/18/2-SAT%E9%97%AE%E9%A2%98%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>URAL1183 - Brackets Sequence（区间DP）</title>
      <link>https://li-fish.github.io/2017/10/16/URAL1183-Brackets-Sequence%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/16/URAL1183-Brackets-Sequence%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/</guid>
      <pubDate>Mon, 16 Oct 2017 01:01:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1183" target="_blank" rel="external">http://acm.timus.ru/problem.aspx?space=1&amp;num=1183</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p><a href="http://blog.csdn.net/jiange_zh/article/details/49994207" target="_blank" rel="external">参考博客</a></p><blockquote><p>定义正规的括号序列如下: </p><ol><li>空序列是一个正规的括号序列 </li><li>如果S是一个正规的括号序列, 那么(S) 和[S] 也都是正规的括号序列。 </li><li>如果A和B是正规的括号序列, 那么AB也是一个正规的括号序列。 </li></ol><p>现给定一个括号序列A（只包含小括号和中括号，可能为空序列），求一个正规括号序列B，使得A包含于B，而且B的长度是满足条件的序列中最小的。</p></blockquote><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>设 $dp[i][j]$ 为使得 [i, j] 这段区间括号匹配所需要的最小花费，那么根据题意，$dp[i][j]$可由两种方式转移而来：</p><ul><li>如果 i 与 j 可以匹配的话$dp[i][j] = dp[i + 1][j - 1]$</li><li>不关 i 与 j 是否匹配 $dp[i][k] = dp[i][k] + dp[k + 1][j]$</li></ul><p>最后递归的打印答案，转移的时候标记一下，当前是否分为两个子序列。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[<span class="number">1123</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[<span class="number">112</span>][<span class="number">112</span>];</div><div class="line"><span class="keyword">int</span> mark[<span class="number">112</span>][<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        <span class="keyword">if</span> (s[l] == <span class="string">'('</span> || s[l] == <span class="string">')'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"()"</span>;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"[]"</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mark[l][r] == <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (s[l] == <span class="string">'('</span>) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</div><div class="line">            print(l + <span class="number">1</span>, r - <span class="number">1</span>);</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span>;</div><div class="line">            print(l + <span class="number">1</span>, r - <span class="number">1</span>);</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"]"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        print(l, mark[l][r]);</div><div class="line">        print(mark[l][r] + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    gets(s + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (!n) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dp[i][i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>; l &lt;= n; l++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = i + l - <span class="number">1</span>;</div><div class="line">            dp[i][j] = INF;</div><div class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'('</span> &amp;&amp; s[j] == <span class="string">')'</span> || s[i] == <span class="string">'['</span> &amp;&amp; s[j] == <span class="string">']'</span>) &#123;</div><div class="line">                dp[i][j] = min(dp[i][j], dp[i + <span class="number">1</span>][j - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">            mark[i][j] = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++) &#123;</div><div class="line">                <span class="keyword">if</span> (dp[i][k] + dp[k + <span class="number">1</span>][j] &lt; dp[i][j]) &#123;</div><div class="line">                    dp[i][j] = dp[i][k] + dp[k + <span class="number">1</span>][j];</div><div class="line">                    mark[i][j] = k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    print(<span class="number">1</span>, n);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>这题卡了好久ORZ，之前了解过一点区间DP，结果还是不会做。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/16/URAL1183-Brackets-Sequence%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HihoCoder1424 - Asa&#39;s Chess Problem（有上下流量限制的费用流）</title>
      <link>https://li-fish.github.io/2017/10/16/HihoCoder1424-Asa-s-Chess-Problem%EF%BC%88%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6%E7%9A%84%E8%B4%B9%E7%94%A8%E6%B5%81%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/16/HihoCoder1424-Asa-s-Chess-Problem%EF%BC%88%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6%E7%9A%84%E8%B4%B9%E7%94%A8%E6%B5%81%EF%BC%89/</guid>
      <pubDate>Sun, 15 Oct 2017 23:53:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/HihoCoder-1424&quot; target
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="https://vjudge.net/problem/HihoCoder-1424" target="_blank" rel="external">https://vjudge.net/problem/HihoCoder-1424</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>参考 <a href="http://www.cnblogs.com/flipped/p/7635420.html" target="_blank" rel="external">http://www.cnblogs.com/flipped/p/7635420.html</a></p><blockquote><p>有个 N×N 的棋盘，告诉你每个格子黑色(1)或白色(0)，以及每对能相互交换的同行或同列格子，每个格子只在一对中，即共有N×N/2对。求最少交换次数使得每行每列的黑格子总数满足给出的上下范围：若最终第i行,第j列分别有R[i],C[j]个黑格子，那么需要让Rl[i]≤R[i]≤Rh[i],Cl[j]≤C[i]≤Ch[j]。</p></blockquote><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>这里先介绍一种有流量下限限制的建图方式，参考<a href="http://www.cnblogs.com/kane0526/archive/2013/04/05/3001108.html" target="_blank" rel="external">这个博客</a>。</p><p>记节点 i 所有流入的流量下限和为 in[i]，所有的流出流入和下限为 out[i]，建一个超级源点 SS，超级汇点 ST。</p><p>如果一个节点 in[i] &gt; out[i]，那么建一条 SS 到 i 的边，流量为 in[i] - out[i]。</p><p>如果 in[i] &lt; out[i]，那么建一条 i 到 ST 的边，流量为 out[i] - in[i]。</p><p>对于无源汇的图来说，上面从 SS 到 ST跑一个最大流，如果上面的从 SS 出发的附加边满流，当前就是一个可行流，否则无解。</p><p>对于有源汇的图来说，需要从 T 到 S 连一条流量为无穷的边，然后再从 SS 到 ST 跑最大流。 </p><p>对于这个题，设每一行每一列原有的黑色棋子数量为 R[i] 和 C[i]。</p><ul><li>首先从 S 到每一行每一列建一条上下限均为 R[i] 或 C[i] 的边</li><li>每一行每一列对 T 建边，容量上下限为 Rl[i]， Rh[i] 或 Cl[i]，Ch[i]</li><li>然后对于可以交换的棋子，如果他们颜色相同，那么不需要建边，否则如果列相同，黑色所在的行向白色棋子所在的行建流量下限为 0 上限为 1 费用为 1 的边，列相同类似</li><li>从 t 到 s 建一条流量下限为 0，上限为无穷的边。</li></ul><p>上述所有边默认费用为 0 。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">600</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> data[<span class="number">112</span>][<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, c, w, nxt;</div><div class="line">&#125; edge[MAX * MAX];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAX], etot;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[<span class="number">112</span>], out[<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> low, <span class="keyword">int</span> up, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    edge[etot].u = u;</div><div class="line">    edge[etot].v = v;</div><div class="line">    edge[etot].c = up - low;</div><div class="line">    edge[etot].w = w;</div><div class="line">    edge[etot].nxt = head[u];</div><div class="line">    head[u] = etot++;</div><div class="line"></div><div class="line">    out[u] += low;</div><div class="line"></div><div class="line">    edge[etot].u = v;</div><div class="line">    edge[etot].v = u;</div><div class="line">    edge[etot].c = <span class="number">0</span>;</div><div class="line">    edge[etot].w = -w;</div><div class="line">    edge[etot].nxt = head[v];</div><div class="line">    head[v] = etot++;</div><div class="line"></div><div class="line">    in[v] += low;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dist[MAX], vis[MAX], pre[MAX], flow[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    flow[s] = <span class="number">1e9</span>;</div><div class="line">    vis[s] = <span class="number">1</span>;</div><div class="line">    dist[s] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">            Edge &amp;e = edge[i];</div><div class="line">            <span class="keyword">if</span> (edge[i].c &gt; <span class="number">0</span> &amp;&amp; dist[e.v] &gt; dist[e.u] + e.w) &#123;</div><div class="line">                dist[e.v] = dist[e.u] + e.w;</div><div class="line">                pre[e.v] = i;</div><div class="line">                flow[e.v] = min(flow[e.u], e.c);</div><div class="line">                <span class="keyword">if</span> (!vis[e.v]) &#123;</div><div class="line">                    vis[e.v] = <span class="literal">true</span>;</div><div class="line">                    q.push(e.v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; min_cost_flow(<span class="keyword">int</span> s, <span class="keyword">int</span> e) &#123;</div><div class="line">    <span class="keyword">int</span> rst = <span class="number">0</span>, total = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        spfa(s);</div><div class="line">        <span class="keyword">if</span> (dist[e] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> d = flow[e], u = e;</div><div class="line">        total += d;</div><div class="line">        rst += dist[e] * d;</div><div class="line">        <span class="keyword">while</span> (u != s) &#123;</div><div class="line">            <span class="keyword">int</span> last = pre[u];</div><div class="line">            edge[last].c -= d;</div><div class="line">            edge[last ^ <span class="number">1</span>].c += d;</div><div class="line">            u = edge[last].u;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> make_pair(total, rst);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> Rl[<span class="number">112</span>], Rh[<span class="number">112</span>], Cl[<span class="number">112</span>], Ch[<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> row[<span class="number">112</span>], col[<span class="number">112</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line"></div><div class="line">        etot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="built_in">memset</span>(col, <span class="number">0</span>, <span class="keyword">sizeof</span>(col));</div><div class="line">        <span class="built_in">memset</span>(row, <span class="number">0</span>, <span class="keyword">sizeof</span>(row));</div><div class="line">        <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</div><div class="line">        <span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(out));</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//源点，汇点，超级源点，超级汇点</span></div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> e = n * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ss = e + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> se = ss + <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i][j]);</div><div class="line">                row[i] += data[i][j];</div><div class="line">                col[j] += data[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;Rl[i], &amp;Rh[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;Cl[i], &amp;Ch[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            add_edge(s, i, row[i], row[i], <span class="number">0</span>);</div><div class="line">            add_edge(s, i + n, col[i], col[i], <span class="number">0</span>);</div><div class="line">            add_edge(i, e, Rl[i], Rh[i], <span class="number">0</span>);</div><div class="line">            add_edge(i + n, e, Cl[i], Ch[i], <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * n / <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> x1, y1, x2, y2;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</div><div class="line">            <span class="keyword">if</span> (data[x1][y1] == data[x2][y2]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (data[x1][y1] == <span class="number">0</span>) swap(x1, x2), swap(y1, y2);</div><div class="line">            <span class="keyword">if</span> (x1 == x2) &#123;</div><div class="line">                add_edge(n + y1, n + y2, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y1 == y2) &#123;</div><div class="line">                add_edge(x1, x2, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        add_edge(e, s, <span class="number">0</span>, <span class="number">1e9</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//对超级源点，超级汇点建边</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + n + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> t = in[i] - out[i];</div><div class="line">            <span class="keyword">if</span> (t &lt; <span class="number">0</span>) &#123;</div><div class="line">                t = -t;</div><div class="line">                add_edge(i, se, <span class="number">0</span>, t, <span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                sum += t;</div><div class="line">                add_edge(ss, i, <span class="number">0</span>, t, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = min_cost_flow(ss, se);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ans.first != sum) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.second);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>这个题感觉也不是很难，感觉应该做出来的，关键是比赛的时候漏看了一个条件，只有列或行相同时才可以交换，如果没有这个条件建图就复杂了，当时也想麻烦了。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/16/HihoCoder1424-Asa-s-Chess-Problem%EF%BC%88%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6%E7%9A%84%E8%B4%B9%E7%94%A8%E6%B5%81%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CodeForces732F - Tourist Reform（边双连通 + DFS）</title>
      <link>https://li-fish.github.io/2017/10/15/CodeForces732F-Tourist-Reform%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A-DFS%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/15/CodeForces732F-Tourist-Reform%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A-DFS%EF%BC%89/</guid>
      <pubDate>Sun, 15 Oct 2017 04:33:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/732/problem/F&quot; targ
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://codeforces.com/contest/732/problem/F" target="_blank" rel="external">http://codeforces.com/contest/732/problem/F</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一张 n 个顶点， m 条边的无向图，保证图连通，没有重边，现在给每个边加上方向，记从点 i 出发可以访问到的点的数量为 $r_i$，求一种分配方向的方式，使得最小的 $r_i$ 尽量的大。</p><p>$2 \le n \le 400000, 1 \le m \le 400000$</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>这里就引用下 <a href="https://blog.sengxian.com/solutions/cf-732f" target="_blank" rel="external">dalao的博客</a>:</p><blockquote><p>我们考虑如何将边定向，定向成 DAG 肯定是极不好的，因为 DAG 里边存在没有出度的点，而这样的话，答案就必然为 1 了。也就是说，不能出去的点，最好要形成一个环，这样答案就是环的大小了。</p><p>将图分解为若干边-双连通分量，将每个边-双连通分量看作一个点，那么此时形成了一棵缩点树。对于每个边-双连通分量，我们可以将里边的边定向，使之成为强联通分量。再将缩点后的树边定向，成为一个边指向根的树形图，这样答案就是根代表的边-双连通分量的答案，由于任意点都可以做树形图的根，所以答案就是最大的边-双连通分量的大小。</p><p><strong>定理：</strong>答案就是是最大的边-双连通分量的大小。<br><strong>证明：</strong>前面已经证明了，最大的边-双连通分量的大小是一个合法答案。现在只需证明，最大的答案不会大于最大的边-双连通分量的大小：考虑定向后的图，将其强联通缩点，答案就是没有出度的强联通分量中最小的那个，如果这个值比最大的边-双连通分量的大小更大，那么考虑将这个强联通分量中的边改为无向边，这就能形成一个边-双连通分量，而且比原图中最大的边-双连通分量的大小还要大，这就产生了矛盾。</p><p>考虑输出方案，树边是很好定向的，DFS 一下缩点树就行了。如何将边-双连通分量中的边定向，使得形成一个强联通分量呢？我们考虑直接使用 DFS 中第一次访问边的顺序，为什么？因为利用这个顺序，肯定能保证联通。我们再考虑 DFS 树，在 DFS 树中，每个点一定能通过 DFS 返祖边和非返祖边的结合，走到自己上方的点（否则存在桥，与边-双连通的定义违背），所以每个点都可以通过定向后的边走到根，自然证明这个原先的边-双连通分量通过这种定向方法后强联通。</p></blockquote><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">4112345</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, nxt;</div><div class="line">&#125; edge[MAX &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAX], ecnt;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfs_clock, scc_cnt;</div><div class="line"><span class="keyword">int</span> low[MAX], pre[MAX], mark[MAX];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[MAX], ans, id;</div><div class="line"><span class="keyword">int</span> data[MAX][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    edge[ecnt].u = u;</div><div class="line">    edge[ecnt].v = v;</div><div class="line">    edge[ecnt].nxt = head[u];</div><div class="line">    head[u] = ecnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    dfs_clock = scc_cnt = ecnt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;data[i][<span class="number">0</span>], &amp;data[i][<span class="number">1</span>]);</div><div class="line">        add_edge(data[i][<span class="number">0</span>], data[i][<span class="number">1</span>]);</div><div class="line">        add_edge(data[i][<span class="number">1</span>], data[i][<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    low[u] = pre[u] = ++dfs_clock;</div><div class="line">    S.push(u);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!pre[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!mark[v]) &#123;</div><div class="line">            low[u] = min(low[u], pre[v]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (pre[u] == low[u]) &#123;</div><div class="line">        scc_cnt++;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            x = S.top();</div><div class="line">            S.pop();</div><div class="line">            mark[x] = scc_cnt;</div><div class="line">            num[scc_cnt]++;</div><div class="line">            <span class="keyword">if</span> (num[scc_cnt] &gt; ans) &#123;</div><div class="line">                ans = num[scc_cnt];</div><div class="line">                id = u;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span> (x != u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[MAX];</div><div class="line"><span class="keyword">int</span> fa[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    fa[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span> (vis[i / <span class="number">2</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (mark[v] != mark[u]) <span class="keyword">continue</span>;</div><div class="line">        vis[i / <span class="number">2</span>] = <span class="literal">true</span>;</div><div class="line">        data[i / <span class="number">2</span>][<span class="number">0</span>] = u;</div><div class="line">        data[i / <span class="number">2</span>][<span class="number">1</span>] = v;</div><div class="line">        <span class="keyword">if</span> (fa[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="comment">//这里类似 DFS 一棵树的过程，如果当前双连通分量已经访问过了，那么不应该通过其他强连通分量去访问了</span></div><div class="line">        <span class="keyword">if</span> (mark[v] != mark[u]) &#123;</div><div class="line">            <span class="keyword">if</span> (fa[mark[v]] == <span class="number">0</span> || fa[mark[v]] == mark[u]) &#123;</div><div class="line">                fa[mark[v]] = mark[u];</div><div class="line">                data[i/<span class="number">2</span>][<span class="number">0</span>] = v;</div><div class="line">                data[i/<span class="number">2</span>][<span class="number">1</span>] = u;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="comment">//第一次 DFS 为双连通分量里面的边分配方向</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        dfs1(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//第二次为连接不同的双连通分量的边分配方向</span></div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</div><div class="line">    fa[mark[id]] = <span class="number">-1</span>;</div><div class="line">    dfs2(id);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, data[i][<span class="number">0</span>], data[i][<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    solve();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>这题卡了好久，主要是为缩点后的图重新建边后会爆内存，然后只能用第一次建的边去 DFS，然后就写的有点恶心了…</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/15/CodeForces732F-Tourist-Reform%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A-DFS%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>URAL1167 - Bicolored Horses（DP）</title>
      <link>https://li-fish.github.io/2017/10/12/URAL1167-Bicolored-Horses%EF%BC%88DP%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/12/URAL1167-Bicolored-Horses%EF%BC%88DP%EF%BC%89/</guid>
      <pubDate>Thu, 12 Oct 2017 01:11:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1167" target="_blank" rel="external">http://acm.timus.ru/problem.aspx?space=1&amp;num=1167</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一段 0 和 1 的串，要求将其划分成 k 个连续的部分（一定要划分成 k 个连续的部分，并且某一部分不能为 0，任一 0 或 1 一定要分到一分组里），记某一分组有 i 个 0 和 j 个 1，那么这一组的值为 $i \cdot j$ ，现在要求划分 k 组，使得这 k 组的值和最小，输出最小值。</p><p>$1 \le N \le 500, 1\le K \le N$</p><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>先是从四维降到了三维，然后还是 MLE，最后类比了一下 M 子段和的题，还是不对，然后翻的别人博客，看到状态转移方程后感觉好像也不是太难…</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>设 $dp[i][j]$ 的含义是划分了前 i 组以第 j 个元素为结尾的最小值。</p><p>那么状态转移方程是:</p><p>$$dp[i][j] = min(dp[i - 1][k] + v | k = 0 \dots j - 1)$$</p><p>含义是，因为分组是连续的第 i 组以 j 结尾可以枚举第 i - 1 组以谁结尾来转移。</p><p>这里的 v 是前缀和，含义是 $[k + 1 , j]$ 这段区间的值。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">500</span> + <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[MAX][MAX];</div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"><span class="keyword">int</span> one[MAX];</div><div class="line"><span class="keyword">int</span> zero[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        <span class="built_in">memset</span>(zero, <span class="number">0</span>, <span class="keyword">sizeof</span>(zero));</div><div class="line">        <span class="built_in">memset</span>(one, <span class="number">0</span>, <span class="keyword">sizeof</span>(one));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, data + i);</div><div class="line">            <span class="keyword">if</span> (data[i]) one[i] += <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> zero[i] += <span class="number">1</span>;</div><div class="line">            one[i] += one[i - <span class="number">1</span>];</div><div class="line">            zero[i] += zero[i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &lt; j; k++) &#123;</div><div class="line">                    <span class="keyword">int</span> v;</div><div class="line">                    v = zero[j] - zero[k];</div><div class="line">                    v *= one[j] - one[k];</div><div class="line">                    dp[i][j] = min(dp[i - <span class="number">1</span>][k] + v, dp[i][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[m][n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/12/URAL1167-Bicolored-Horses%EF%BC%88DP%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>URAL1260 - Nudnik Photographer（DP+递推）</title>
      <link>https://li-fish.github.io/2017/10/11/URAL1260-Nudnik-Photographer%EF%BC%88DP-%E9%80%92%E6%8E%A8%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/10/11/URAL1260-Nudnik-Photographer%EF%BC%88DP-%E9%80%92%E6%8E%A8%EF%BC%89/</guid>
      <pubDate>Wed, 11 Oct 2017 04:48:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1260" target="_blank" rel="external">http://acm.timus.ru/problem.aspx?space=1&amp;num=1260</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出 1 ～ N 的 N 个数，进行排列，要求 1 一定要为第一个元素，并且任意两个相邻的元素之间的差不能超过 2，输出有多少种这样的排列。</p><p>$1\le N \le 55$</p><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>感觉是和程设课上的递推题差不多，然后卡了我了两个小时也没想出来…看来数据结构刷多了真的能刷傻。</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>$dp[i]$的含义是，i 个数有多少个符合上述要求排列。那么状态转移方程是：</p><p>$$dp[i] = dp[i - 3] + dp[i - 1] + 1$$</p><p>这样分情况考虑：</p><p>首先第一个位置肯定是要放 1 的（因为题目要求），然后</p><ul><li>第二个位置放 2，那么现在的排列的个数等价于 $dp[i - 1]$，你可以当做把 1 扔掉，然后剩下的数都减一</li><li>第二个位置放 3<ul><li>第三个位置放 2，那么第四个位置一定是要放 4，那么当前情况的排列总数是等价于$dp[i - 3]$的</li><li>如果第三个位置不放 2，那么只有一种情况，假设 n = 8， 那么是1 3 5 7 8 6 4 2</li></ul></li></ul><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line">ll dp[<span class="number">60</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    dp[<span class="number">2</span>] = <span class="number">1</span>;</div><div class="line">    dp[<span class="number">3</span>] = <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= <span class="number">55</span>; i++) &#123;</div><div class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">3</span>] + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/11/URAL1260-Nudnik-Photographer%EF%BC%88DP-%E9%80%92%E6%8E%A8%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>BZOJ1500 - 维修数列(Splay)</title>
      <link>https://li-fish.github.io/2017/10/10/BZOJ1500-%E7%BB%B4%E4%BF%AE%E6%95%B0%E5%88%97-Splay/</link>
      <guid>https://li-fish.github.io/2017/10/10/BZOJ1500-%E7%BB%B4%E4%BF%AE%E6%95%B0%E5%88%97-Splay/</guid>
      <pubDate>Tue, 10 Oct 2017 13:45:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=1
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1500" target="_blank" rel="external">http://www.lydsy.com/JudgeOnline/problem.php?id=1500</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出 N 个数字和 M 次操作。</p><p>分为下面六种操作：</p><p><img src="http://www.lydsy.com/JudgeOnline/images/1500_1.jpg" alt=""></p><p>$M \le 2\times 10^4$，保证序列中的数字不会超过 $5 \times 10^5$，并且插入数字的总数不超过$4 \times 10^6$</p><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>调了一晚上才 A 掉，最后还是对照<a href="http://blog.csdn.net/a1s4z5/article/details/51890310" target="_blank" rel="external">金桔的代码</a>改的。</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>裸的 Splay 题，Splay的操作基本上都用上了，但是有好多坑点，下面列举一下：</p><ul><li>GET-SUM 有可能 y = 0，这是计算区间时有可能右区间大于左区间。</li><li>总共可能用到 $4 \times 10^6$ 个节点，这样会超内存，但是同时在序列的节点最多只有$5 \times 10^5$，所以要自己写内存回收。</li><li>求最大子列和需要维护的信息是不对称的，当节点翻转时，对应维护的信息也需要翻转。</li><li>当进行插入和删除操作的时候，需要维护一下根节点和插入到的父亲节点，主要是为了维护 size 这个值，因为 getid 需要用这个值二分，否则会 TLE。</li><li>区间修改时需要两个变量，一个是 lazy 值，另一个是判断是否进行了修改。</li></ul><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">552345</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Info</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> size;</div><div class="line">    ll sum;</div><div class="line">    ll lma, rma, tma;</div><div class="line"></div><div class="line">    Info(ll v = <span class="number">0</span>) &#123;</div><div class="line">        size = <span class="number">1</span>;</div><div class="line">        sum = v;</div><div class="line">        lma = rma = tma = v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addIt</span><span class="params">(ll v)</span> </span>&#123;</div><div class="line">        sum = v * size;</div><div class="line">        lma = rma = tma = max(sum, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//翻转区间信息</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">revIt</span><span class="params">()</span> </span>&#123;</div><div class="line">        swap(lma, rma);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//进行区间信息合并</span></div><div class="line">Info <span class="keyword">operator</span>+(<span class="keyword">const</span> struct Info &amp;a, <span class="keyword">const</span> struct Info &amp;b) &#123;</div><div class="line">    <span class="function">Info <span class="title">rst</span><span class="params">(a.sum + b.sum)</span></span>;</div><div class="line">    rst.size = a.size + b.size;</div><div class="line"></div><div class="line">    rst.lma = max(a.lma, a.sum + b.lma);</div><div class="line">    rst.rma = max(b.rma, b.sum + a.rma);</div><div class="line">    rst.tma = max(max(a.tma, b.tma), a.rma + b.lma);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>], fa;</div><div class="line">    ll val, lazy;</div><div class="line">    Info info;</div><div class="line">    <span class="keyword">bool</span> change;</div><div class="line">    <span class="keyword">bool</span> flip;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> &amp;<span class="title">l</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> son[<span class="number">0</span>]; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> &amp;<span class="title">r</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> son[<span class="number">1</span>]; &#125;</div><div class="line"></div><div class="line">    Node(ll v = <span class="number">0</span>) &#123;</div><div class="line">        l() = r() = fa = <span class="number">-1</span>;</div><div class="line">        val = v;</div><div class="line">        change = <span class="literal">false</span>;</div><div class="line">        info = Info(v);</div><div class="line">        lazy = <span class="number">0</span>;</div><div class="line">        flip = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//翻转和修改操作</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addIt</span><span class="params">(ll v)</span> </span>&#123;</div><div class="line">        val = v;</div><div class="line">        lazy = v;</div><div class="line">        change = <span class="literal">true</span>;</div><div class="line">        info.addIt(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">revIt</span><span class="params">()</span> </span>&#123;</div><div class="line">        flip ^= <span class="number">1</span>;</div><div class="line">        swap(l(), r());</div><div class="line">        info.revIt();</div><div class="line">    &#125;</div><div class="line">&#125; node[maxn];</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::push_down() &#123;</div><div class="line">    <span class="keyword">if</span> (change) &#123;</div><div class="line">        <span class="keyword">if</span> (l() != <span class="number">-1</span>) node[l()].addIt(lazy);</div><div class="line">        <span class="keyword">if</span> (r() != <span class="number">-1</span>) node[r()].addIt(lazy);</div><div class="line">        lazy = <span class="number">0</span>;</div><div class="line">        change = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (flip) &#123;</div><div class="line">        <span class="keyword">if</span> (l() != <span class="number">-1</span>) node[l()].revIt();</div><div class="line">        <span class="keyword">if</span> (r() != <span class="number">-1</span>) node[r()].revIt();</div><div class="line">        flip = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::maintain() &#123;</div><div class="line">    info = Info(val);</div><div class="line">    <span class="keyword">if</span> (l() != <span class="number">-1</span>) info = node[l()].info + info;</div><div class="line">    <span class="keyword">if</span> (r() != <span class="number">-1</span>) info = info + node[r()].info;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ori</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fa = node[st].fa;</div><div class="line">    <span class="keyword">if</span> (fa == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> st == node[fa].r();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> sn, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (st != <span class="number">-1</span>) &#123;</div><div class="line">        node[st].son[d] = sn;</div><div class="line">        node[st].maintain();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sn != <span class="number">-1</span>) node[sn].fa = st;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">zg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> st = node[x].fa, p = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    node[st].push_down();</div><div class="line">    node[x].push_down();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> d = ori(x), dst = ori(st);</div><div class="line">    <span class="keyword">if</span> (st != <span class="number">-1</span>) p = node[st].fa;</div><div class="line">    setc(st, node[x].son[d ^ <span class="number">1</span>], d);</div><div class="line">    setc(x, st, d ^ <span class="number">1</span>);</div><div class="line">    setc(p, x, dst);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> f(x) (node[x].fa)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa = <span class="number">-1</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (f(x) != fa) &#123;</div><div class="line">        <span class="keyword">if</span> (f(f(x)) == fa) zg(x);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (ori(x) == ori(f(x))) zg(f(x));</div><div class="line">            <span class="keyword">else</span> zg(x);</div><div class="line">            zg(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (fa == <span class="number">-1</span>) root = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> st)</span> </span>&#123;</div><div class="line">    node[st].push_down();</div><div class="line">    <span class="keyword">int</span> l = node[st].l();</div><div class="line">    <span class="keyword">int</span> lsize = <span class="number">1</span> + (l == <span class="number">-1</span> ? <span class="number">0</span> : node[l].info.size);</div><div class="line">    <span class="keyword">if</span> (v == lsize) <span class="keyword">return</span> st;</div><div class="line">    <span class="keyword">int</span> d = v &gt; lsize;</div><div class="line">    <span class="keyword">if</span> (d) v -= lsize;</div><div class="line">    <span class="keyword">return</span> getid(v, node[st].son[d]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getseg</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    l--, r++;</div><div class="line">    l = getid(l + <span class="number">1</span>, root), r = getid(r + <span class="number">1</span>, root);</div><div class="line">    splay(r);</div><div class="line">    splay(l, r);</div><div class="line">    <span class="keyword">return</span> node[l].r();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//进行插入和删除操作需要维护一下根节点和根节点的左儿子的区间信息</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">segMaintain</span><span class="params">()</span> </span>&#123;</div><div class="line">    node[node[root].l()].maintain();</div><div class="line">    node[root].maintain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//进行内存回收</span></div><div class="line"><span class="keyword">int</span> head, tail;</div><div class="line"><span class="keyword">int</span> value[maxn], nxt[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rst = head;</div><div class="line">    head = nxt[head];</div><div class="line">    node[rst] = Node(v);</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (st == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">    recycle(node[st].l());</div><div class="line">    recycle(node[st].r());</div><div class="line">    nxt[tail] = st;</div><div class="line">    tail = st;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pos = getseg(l, r);</div><div class="line">    setc(node[pos].fa, <span class="number">-1</span>, <span class="number">1</span>);</div><div class="line">    recycle(pos);</div><div class="line">    segMaintain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> st = new_node(value[m]);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (l &lt; m) setc(st, build(l, m - <span class="number">1</span>), <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (m &lt; r) setc(st, build(m + <span class="number">1</span>, r), <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> st;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化Splay</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    head = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) &#123;</div><div class="line">        nxt[i] = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    tail = maxn - <span class="number">1</span>;</div><div class="line">    nxt[tail] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> build(<span class="number">0</span>, n + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pos = getseg(l, r);</div><div class="line">    node[pos].addIt(v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> l = pos;</div><div class="line">    <span class="keyword">int</span> r = pos + <span class="number">1</span>;</div><div class="line">    l = getid(l + <span class="number">1</span>, root);</div><div class="line">    r = getid(r + <span class="number">1</span>, root);</div><div class="line">    splay(r);</div><div class="line">    splay(l, r);</div><div class="line">    setc(l, p, <span class="number">1</span>);</div><div class="line">    segMaintain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Info <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> node[getseg(l, r)].info;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pos = getseg(l, r);</div><div class="line">    node[pos].revIt();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> op[<span class="number">11</span>];</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, value + i);</div><div class="line">        &#125;</div><div class="line">        value[n + <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        root = build(n);</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="keyword">int</span> x, y, z;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, op);</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op, <span class="string">"GET-SUM"</span>) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(x, x + y - <span class="number">1</span>).sum);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op, <span class="string">"MAX-SUM"</span>) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//因为插入了两个虚拟节点，所以要减二才是总共的节点数</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, node[root].info.size - <span class="number">2</span>).tma);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op, <span class="string">"INSERT"</span>) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= y; i++) &#123;</div><div class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, value + i);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//用 build 根据刚刚输入的值生成一个 Splay 再与主 Splay 合并</span></div><div class="line">                insert(x, build(<span class="number">1</span>, y));</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op, <span class="string">"DELETE"</span>) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                del(x, x + y - <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op, <span class="string">"REVERSE"</span>) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                flip(x, x + y - <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op, <span class="string">"MAKE-SAME"</span>) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">                <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                add(x, x + y - <span class="number">1</span>, z);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/10/BZOJ1500-%E7%BB%B4%E4%BF%AE%E6%95%B0%E5%88%97-Splay/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU3487 - Play with Chain(Splay + 模板详解)</title>
      <link>https://li-fish.github.io/2017/10/09/HDU3487-Play-with-Chain-Splay-%E6%A8%A1%E6%9D%BF%E8%AF%A6%E8%A7%A3/</link>
      <guid>https://li-fish.github.io/2017/10/09/HDU3487-Play-with-Chain-Splay-%E6%A8%A1%E6%9D%BF%E8%AF%A6%E8%A7%A3/</guid>
      <pubDate>Mon, 09 Oct 2017 13:36:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/HDU-3487&quot; target=&quot;_bla
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="https://vjudge.net/problem/HDU-3487" target="_blank" rel="external">https://vjudge.net/problem/HDU-3487</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出一个 1 ~ n 的序列，有 m 次操作，分为以下两种：</p><ul><li>CUT a, b, c 将区间 a ~ b 剪下来，放到剩下的序列中第 c 个元素后面。</li><li>FLIP a, b 将区间 a ~ b 翻转。</li></ul><p>输出执行完全部操作后的序列。</p><p>$1 \le n, m \le 3 \times 100000$</p><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>模板题，对着板子敲的，理解了下 Splay 的细节。</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>区间翻转和区间删除插入都是 Splay 树的经典操作，然后会 Splay 后这就是一个模板题。</p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//用来处理区间询问，每个节点维护的是一个子树的信息</span></div><div class="line"><span class="comment">//Splay可以将一段连续区间内的节点放到一颗子树内，所以这样可以维护一段区间的信息</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Info</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">int</span> ma;</div><div class="line"></div><div class="line">    Info() &#123;&#125;;</div><div class="line"></div><div class="line">    Info(<span class="keyword">int</span> x) &#123;</div><div class="line">        size = <span class="number">1</span>;</div><div class="line">        ma = x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addIt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        ma += x;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//区间（子树）信息的合并</span></div><div class="line">Info <span class="keyword">operator</span>+(<span class="keyword">const</span> Info &amp;l, <span class="keyword">const</span> Info &amp;r) &#123;</div><div class="line">    Info ret;</div><div class="line">    ret.size = l.size + r.size;</div><div class="line">    ret.ma = max(l.ma, r.ma);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3</span> * <span class="number">100000</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root;</div><div class="line"></div><div class="line"><span class="comment">//Splay的节点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="comment">//son[0]是左儿子，son[1]是右儿子</span></div><div class="line">    <span class="keyword">int</span> son[<span class="number">2</span>], fa;</div><div class="line">    <span class="keyword">int</span> val, lazy;</div><div class="line">    <span class="keyword">bool</span> flp;</div><div class="line">    Info info;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> &amp;<span class="title">l</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> son[<span class="number">0</span>]; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> &amp;<span class="title">r</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> son[<span class="number">1</span>]; &#125;</div><div class="line"></div><div class="line">    Node(<span class="keyword">int</span> v = <span class="number">0</span>) &#123;</div><div class="line">        l() = r() = fa = <span class="number">-1</span>;</div><div class="line">        val = v;</div><div class="line">        info = Info(v);</div><div class="line">        lazy = <span class="number">0</span>;</div><div class="line">        flp = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//修改Splay上的节点后，也需要对 info 的信息进行维护</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addIt</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        val += v;</div><div class="line">        lazy += v;</div><div class="line">        info.addIt(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">()</span></span>;</div><div class="line">&#125; node[maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//进行 pushdown 操作，类似线段树</span></div><div class="line"><span class="keyword">void</span> Node::push_down() &#123;</div><div class="line">    <span class="keyword">if</span> (lazy != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (l() != <span class="number">-1</span>) node[l()].addIt(lazy);</div><div class="line">        <span class="keyword">if</span> (r() != <span class="number">-1</span>) node[r()].addIt(lazy);</div><div class="line">        lazy = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (flp) &#123;</div><div class="line">        swap(l(), r());</div><div class="line">        <span class="keyword">if</span> (l() != <span class="number">-1</span>) node[l()].flp ^= <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (r() != <span class="number">-1</span>) node[r()].flp ^= <span class="number">1</span>;</div><div class="line">        flp = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Splay 进行旋转操作时，子树发生了改变，需要重新维护区间（子树）信息</span></div><div class="line"><span class="keyword">void</span> Node::maintain() &#123;</div><div class="line">    info = Info(val);</div><div class="line">    <span class="keyword">if</span> (l() != <span class="number">-1</span>) info = node[l()].info + info;</div><div class="line">    <span class="keyword">if</span> (r() != <span class="number">-1</span>) info = info + node[r()].info;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//查询当前节点是父亲的左儿子还是右儿子，左儿子返回0，右儿子返回1，如果无父亲返回-1</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ori</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fa = node[st].fa;</div><div class="line">    <span class="keyword">if</span> (fa == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> st == node[fa].r();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//把 sn 变成 st 的儿子节点，如果 d 是 0 是左儿子，否则是右儿子</span></div><div class="line"><span class="comment">//这里子树发生了改变，需要重新维护 info 信息</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> sn, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (st != <span class="number">-1</span>) &#123;</div><div class="line">        node[st].son[d] = sn;</div><div class="line">        node[st].maintain();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sn != <span class="number">-1</span>) node[sn].fa = st;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//进行旋转操作，这里需要自己画图理解一下</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">zg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> st = node[x].fa, p = <span class="number">-1</span>;</div><div class="line">    node[st].push_down();</div><div class="line">    node[x].push_down();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> d = ori(x), dst = ori(st);</div><div class="line">    <span class="keyword">if</span> (st != <span class="number">-1</span>) p = node[st].fa;</div><div class="line">    setc(st, node[x].son[d ^ <span class="number">1</span>], d);</div><div class="line">    setc(x, st, d ^ <span class="number">1</span>);</div><div class="line">    setc(p, x, dst);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> f(x) (node[x].fa)</span></div><div class="line"></div><div class="line"><span class="comment">//将 x 旋转成 fa 的儿子，如果将 x 旋转成 根节点的话则不填 fa</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa = <span class="number">-1</span>)</span> </span>&#123;</div><div class="line">    <span class="comment">//循环直到 x 是 fa 的儿子</span></div><div class="line">    <span class="keyword">while</span> (f(x) != fa) &#123;</div><div class="line">        <span class="comment">//如果 fa 是 x 的爷爷，那么只需要一次旋转</span></div><div class="line">        <span class="keyword">if</span> (f(f(x)) == fa) zg(x);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//双旋！</span></div><div class="line"></div><div class="line">            <span class="comment">//说明进行 zig zig 或者 zag zag 旋转</span></div><div class="line">            <span class="keyword">if</span> (ori(x) == ori(f(x))) zg(f(x));</div><div class="line">            <span class="keyword">else</span> zg(x);</div><div class="line">            zg(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//更新根节点</span></div><div class="line">    <span class="keyword">if</span> (fa == <span class="number">-1</span>) root = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> value[maxn];</div><div class="line"><span class="keyword">int</span> pos;</div><div class="line"></div><div class="line"><span class="comment">//要保证 value 有序，类似线段树建树，这样树高是 log(n) 的</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> st = pos++;</div><div class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    node[st] = Node(value[m]);</div><div class="line">    <span class="keyword">if</span> (l &lt; m) setc(st, build(l, m - <span class="number">1</span>), <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (m &lt; r) setc(st, build(m + <span class="number">1</span>, r), <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> st;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    pos = <span class="number">0</span>;</div><div class="line">    <span class="comment">//添加 0 和 n + 1 两个虚拟节点，方便 cut 操作</span></div><div class="line">    <span class="keyword">return</span> build(<span class="number">0</span>, n + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获得以 st 为根节点，中序遍历的第 v 个节点</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> st)</span> </span>&#123;</div><div class="line">    <span class="comment">//在树上进行二分</span></div><div class="line">    node[st].push_down();</div><div class="line">    <span class="keyword">int</span> l = node[st].l();</div><div class="line">    <span class="keyword">int</span> lsize = <span class="number">1</span> + (l == <span class="number">-1</span> ? <span class="number">0</span> : node[l].info.size);</div><div class="line">    <span class="keyword">if</span> (v == lsize) <span class="keyword">return</span> st;</div><div class="line">    <span class="keyword">int</span> d = v &gt; lsize;</div><div class="line">    <span class="keyword">if</span> (d) v -= lsize;</div><div class="line">    <span class="keyword">return</span> getid(v, node[st].son[d]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getseg</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    l--, r++;</div><div class="line">    l = getid(l + <span class="number">1</span>, root), r = getid(r + <span class="number">1</span>, root);</div><div class="line">    <span class="comment">//现在 r+1 是 l-1 的父亲，那么 l-r 这一段子树肯定是 l-1 的右儿子</span></div><div class="line">    splay(r);</div><div class="line">    splay(l, r);</div><div class="line">    <span class="keyword">return</span> node[l].r();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pos = getseg(l, r);</div><div class="line">    node[pos].flp ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">    <span class="comment">//切下来 l - r 这段区间</span></div><div class="line">    <span class="keyword">int</span> rootson1 = getseg(l, r);</div><div class="line">    <span class="keyword">int</span> father = node[rootson1].fa;</div><div class="line">    setc(father, <span class="number">-1</span>, <span class="number">1</span>);</div><div class="line">    l = idx, r = idx + <span class="number">1</span>;</div><div class="line">    <span class="comment">//因为这里是虚拟节点，所以要多加一个 1</span></div><div class="line">    l = getid(l + <span class="number">1</span>, root);</div><div class="line">    r = getid(r + <span class="number">1</span>, root);</div><div class="line">    <span class="comment">//将 idx+1 成为 idx 的父亲，那么上面切下来的区间放到idx的右边即可</span></div><div class="line">    splay(r);</div><div class="line">    splay(l, r);</div><div class="line">    setc(l, rootson1, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> ans[maxn], cnt;</div><div class="line"></div><div class="line"><span class="comment">//中序遍历</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    node[now].push_down();</div><div class="line">    <span class="keyword">if</span> (node[now].son[<span class="number">0</span>] != <span class="number">-1</span>) dfs(node[now].son[<span class="number">0</span>]);</div><div class="line">    ans[cnt++] = node[now].val;</div><div class="line">    <span class="keyword">if</span> (node[now].son[<span class="number">1</span>] != <span class="number">-1</span>) dfs(node[now].son[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> op[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> L, R, idx;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> &amp;&amp; m == <span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) value[i] = i;</div><div class="line">        root = build(n);</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>, op, &amp;L, &amp;R);</div><div class="line">            <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">'F'</span>) flip(L, R);</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;idx);</div><div class="line">                cut(L, R, idx);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</div><div class="line">        dfs(root);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], i == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/09/HDU3487-Play-with-Chain-Splay-%E6%A8%A1%E6%9D%BF%E8%AF%A6%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CodeForces868C - Qualification Rounds(思维+二进制)</title>
      <link>https://li-fish.github.io/2017/10/09/CodeForces868C-Qualification-Rounds-%E6%80%9D%E7%BB%B4-%E4%BA%8C%E8%BF%9B%E5%88%B6/</link>
      <guid>https://li-fish.github.io/2017/10/09/CodeForces868C-Qualification-Rounds-%E6%80%9D%E7%BB%B4-%E4%BA%8C%E8%BF%9B%E5%88%B6/</guid>
      <pubDate>Mon, 09 Oct 2017 08:41:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/868/problem/C&quot; targ
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://codeforces.com/contest/868/problem/C" target="_blank" rel="external">http://codeforces.com/contest/868/problem/C</a></p><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>现在有 n 个长度为 k 二进制串，现在要从中选出 m 个二进制串，使得每一位的 1 的数量不能大于 0 的数量。</p><p>$1 \le n \le 10^5, 1 \le k \le 4$</p><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>比赛的时候一直没思路，于是乱写了一个假算法，对每个串分配权重并贪心，不过居然能过，不过还是被 Hack 掉了。</p><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>首先，这里 K 非常小，所以最多也就是有 16 种不同的串，考虑用桶来统计。</p><p>然后假设有一个解，那么可以<a href="http://www.cnblogs.com/yyf0309/p/7632780.html" target="_blank" rel="external">证明</a>，至多只需要选两个串就可以满足题目要求（如果存在 0000 的串，那么只需这一个串就可以满足题目要求了）。</p><p>那么这时候我们暴力枚举这如果串就可以了，复杂度$O(16\times 16)$ </p><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//统计每个串的出现次数</span></div><div class="line"><span class="keyword">int</span> data[<span class="number">1123</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</div><div class="line">    <span class="keyword">while</span> (n--) &#123;</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>, cnt = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</div><div class="line">            <span class="keyword">int</span> t;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">            temp += t * cnt;</div><div class="line">            cnt *= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        data[temp]++;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果存在 0000 这样的串，那么只选这一个串就可以了</span></div><div class="line">    <span class="keyword">if</span> (data[<span class="number">0</span>]) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//枚举如果串</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; k); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (!data[i]) <span class="keyword">continue</span>;</div><div class="line">            data[i]--;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; k); j++) &#123;</div><div class="line">                <span class="comment">//这里要保证两个串的每一位至少有一个是 0，那么他们 and 操作结果是 0</span></div><div class="line">                <span class="keyword">if</span> ((i &amp; j) == <span class="number">0</span> &amp;&amp; data[j]) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            data[i]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/09/CodeForces868C-Qualification-Rounds-%E6%80%9D%E7%BB%B4-%E4%BA%8C%E8%BF%9B%E5%88%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>口琴用简谱简易教程</title>
      <link>https://li-fish.github.io/2017/10/08/%E5%8F%A3%E7%90%B4%E7%94%A8%E7%AE%80%E8%B0%B1%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</link>
      <guid>https://li-fish.github.io/2017/10/08/%E5%8F%A3%E7%90%B4%E7%94%A8%E7%AE%80%E8%B0%B1%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</guid>
      <pubDate>Sun, 08 Oct 2017 11:19:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;音乐的构成主要由以下四个要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音的高低&lt;/li&gt;
&lt;li&gt;音的长短&lt;/li&gt;
&lt;li&gt;音的强弱&lt;/li&gt;
&lt;li
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>音乐的构成主要由以下四个要素：</p><ul><li>音的高低</li><li>音的长短</li><li>音的强弱</li><li>音的音质</li></ul><p>这里主要说下简谱对于音的高低和音的长短是怎么表示的。</p><h1 id="音高"><a href="#音高" class="headerlink" title="音高"></a>音高</h1><p>在简谱中最基本的符号就是音符，音符用 1 - 7 的数字来表示，分别代表音的高低，对应读法依次是 do re mi fa so la si。所以说一个音符的写法就代表了这个音的高低。</p><p>但是只用 7 个数字来表示所有音的高低未免太少了些，而且人们发现声音的高低之间也是有规律的，所以可以把音的高低分为七个一组。于是有了低音，中音，高音之分，对于口琴来说了解这些已经够用了。</p><p>中音就是直接用 1 - 7 来表示，高音是给数字上面加一个点从 $\dot{1} $ - $\dot{7}$，低音同理不过点是画在下面的。</p><p><img src="http://chuantu.biz/t6/85/1507462318x2890149721.png" alt=""></p><p>上图对应半音阶的孔位布局，还是比较容易理解的，每个孔对应两个音高，左边的是吹音，右边的是吸音。口琴是包括吹和吸的（所以不像网上别人说的那样，“这个人口琴好厉害呀，肺活量一定很大吧”之类的）。</p><p>这里需要注意的是，半音阶是有一个半音的，加音符前面加一个 #，例如 #1，这个半音就是指一个介于 1 与 2 之间的音。</p><p>所以半音阶对比其他孔数相同的口琴，多了一倍的音。比如 12 孔的半音阶，吹吸分别是两个音，然后按下推键之后又是两个音，所以是 $12 \times 2 \times 2 = 48$ 个音。</p><h1 id="音长"><a href="#音长" class="headerlink" title="音长"></a>音长</h1><p>很多谱子上面有一个 $\frac{4}{4}$的符号，对于$\frac{a}{b}$ 的含义是，以 b 分音符为一拍，每小节有 a 拍。</p><p>至于一拍有多长时间，这个就见仁见智了，所以说每一拍的时长都是相对的，但是节奏是有序的。</p><p>音符分为</p><ul><li>全音符 1———</li><li>二分音符1—</li><li>四分音符1</li><li>八分音符$\underline{1}$</li></ul><p>（其实还有十六分音符，三十二分音符，对应的把下划线多划几道就是了）</p><p>乐谱中基本上以四分音符为主，确定号四分音符的时长，其他的都是根据四分音符得来的。</p><p>比如，一个四分音符吹 1 s 那么对应的一个八分音符需要吹 0.5 s 。</p><p>另外还有一种经常见到的是连音线。这里无法用数学公式打出，只好复制图片了。</p><p><img src="http://chuantu.biz/t6/85/1507471897x2890149721.png" alt=""></p><p>最后，乐谱中常见的那一个竖线，是小节线，表示一小结的结束。</p><h1 id="常见的纯数字谱"><a href="#常见的纯数字谱" class="headerlink" title="常见的纯数字谱"></a>常见的纯数字谱</h1><p>好多人为了在网上记谱方便，用 1 代表中音 1，(1) 代表低音 1，[1] 代表高音1。</p><p>但是这并不是硬性规定，也可以用 1 代表低音，[1]，至于这点，一般会给出说明的，如果没有的话试一下就好了。</p><p>例如下面的天空之城谱子 [] 表示高音，不加任何括号是低音。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">7[#1] [2][#1][2][#4][#1]</div><div class="line">#4#4767[2]6</div><div class="line">#4#45#45[2]#4</div><div class="line">[2] [2] [2][#1]#5#5[#1][#1]</div><div class="line">7[#1] [2][#1][2][#4][#1]</div><div class="line">#4#4767[2]6</div><div class="line">#45[2][#1][#1][2][3][3][#4][2]</div><div class="line">[2][#1]77[#1]#67</div><div class="line">[2][3][#4][3][#4][6][3]</div><div class="line">66[2][#1][2][#4][#4]</div><div class="line">7[#1][2][#1][3][3][2]66</div><div class="line">[5][#4][3][2][#4]</div><div class="line">[#4][7][6] [6][#4][3][2]</div><div class="line">[2][3][2][3][3][6][#4]</div><div class="line">[#4][7][6][#4][3][2]</div><div class="line">[2][3][2][3][3][#1]7</div></pre></td></tr></table></figure><p>不过这样完全看不出来音长了，只能凭感觉，所以建议找铺子的时候去找规范的简谱，这种谱子到时比较普及就是了。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/10/08/%E5%8F%A3%E7%90%B4%E7%94%A8%E7%AE%80%E8%B0%B1%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>主席树（模板）</title>
      <link>https://li-fish.github.io/2017/09/25/%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/09/25/%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</guid>
      <pubDate>Mon, 25 Sep 2017 06:50:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;感谢-amp-资料：&quot;&gt;&lt;a href=&quot;#感谢-amp-资料：&quot; class=&quot;headerlink&quot; title=&quot;感谢&amp;amp;资料：&quot;&gt;&lt;/a&gt;感谢&amp;amp;资料：&lt;/h1&gt;&lt;p&gt;感谢 bLue 学长的讲堂（虽然之前就差不多学会了），和&lt;a href=&quot;h
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="感谢-amp-资料："><a href="#感谢-amp-资料：" class="headerlink" title="感谢&amp;资料："></a>感谢&amp;资料：</h1><p>感谢 bLue 学长的讲堂（虽然之前就差不多学会了），和<a href="https://www.bilibili.com/video/av4619406/" target="_blank" rel="external">卿学姐的视频</a>。</p><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>只是刚入门，这里当做存一个模板，主席树的功能是可以存储历史版本的线段树，然后可以干很多神奇的事情。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">112345</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> sum, l, r;</div><div class="line">&#125; tree[MAX * <span class="number">40</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> root[MAX], cnt;</div><div class="line"><span class="keyword">int</span> data[MAX];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sorted;</div><div class="line"></div><div class="line"><span class="comment">//离散化获得ID</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> lower_bound(sorted.begin(), sorted.end(), x) - sorted.begin() + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    cnt = <span class="number">0</span>;</div><div class="line">    root[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//根据旧版本的线段树创建新线段树的节点</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_node</span><span class="params">(<span class="keyword">int</span> po)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> idx = ++cnt;</div><div class="line">    tree[idx].sum = tree[po].sum + <span class="number">1</span>;</div><div class="line">    tree[idx].l = tree[po].l;</div><div class="line">    tree[idx].r = tree[po].r;</div><div class="line">    <span class="keyword">return</span> idx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> po, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">    o = create_node(po);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (pos &lt;= m) updata(tree[o].l, tree[po].l, l, m, pos);</div><div class="line">    <span class="keyword">else</span> updata(tree[o].r, tree[po].r, m + <span class="number">1</span>, r, pos);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//二分查询</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> sum = tree[tree[e].l].sum - tree[tree[s].l].sum;</div><div class="line">    <span class="keyword">if</span> (k &lt;= sum) <span class="keyword">return</span> query(tree[s].l, tree[e].l, l, m, k);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(tree[s].r, tree[e].r, m + <span class="number">1</span>, r, k - sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m)) &#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i]);</div><div class="line">            sorted.push_back(data[i]);</div><div class="line">        &#125;</div><div class="line">        sort(sorted.begin(), sorted.end());</div><div class="line">        sorted.erase(unique(sorted.begin(), sorted.end()), sorted.end());</div><div class="line">        <span class="keyword">int</span> num = sorted.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            updata(root[i], root[i - <span class="number">1</span>], <span class="number">1</span>, num, get_id(data[i]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">int</span> x, y, k;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;k);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sorted[query(root[x - <span class="number">1</span>], root[y], <span class="number">1</span>, num, k) - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/09/25/%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AC自动机（模板）</title>
      <link>https://li-fish.github.io/2017/09/25/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/09/25/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/</guid>
      <pubDate>Mon, 25 Sep 2017 06:13:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;感谢-amp-资料：&quot;&gt;&lt;a href=&quot;#感谢-amp-资料：&quot; class=&quot;headerlink&quot; title=&quot;感谢&amp;amp;资料：&quot;&gt;&lt;/a&gt;感谢&amp;amp;资料：&lt;/h1&gt;&lt;p&gt;主要参考紫书的写法，其他的写法都用到了指针，不太喜欢指针…&lt;/p&gt;
&lt;p&gt;因
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="感谢-amp-资料："><a href="#感谢-amp-资料：" class="headerlink" title="感谢&amp;资料："></a>感谢&amp;资料：</h1><p>主要参考紫书的写法，其他的写法都用到了指针，不太喜欢指针…</p><p>因为紫书没有完整的代码，然后参考了一下 <a href="http://www.acyume.com/archives/19" target="_blank" rel="external">dalao 的博客</a>。</p><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>AC自动机主要解决的是字符串匹配问题，不同于 KMP 的是，AC 自动机可以进行多个模式串的匹配。KMP 的失配指针是一个线性的数组，但是 AC 自动机是多个模式串匹配，所以适配指针是一个树型的结构。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//字典树的最大节点个数</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">250001</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</div><div class="line"><span class="comment">//有多少个不同的字符</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIGMA_SIZE = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="comment">//字典树的节点</span></div><div class="line"><span class="keyword">int</span> ch[MAX][SIGMA_SIZE];</div><div class="line"><span class="comment">//当前节点是否为一个模式串的结尾， 当前节点的上一个模式串结尾， fail指针</span></div><div class="line"><span class="keyword">int</span> val[MAX], last[MAX], f[MAX], sz;</div><div class="line"><span class="keyword">int</span> ANS;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    sz = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(ch, <span class="number">0</span>, <span class="keyword">sizeof</span>(ch));</div><div class="line">    <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span>(val));</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</div><div class="line">    <span class="built_in">memset</span>(last, <span class="number">0</span>, <span class="keyword">sizeof</span>(last));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//更新答案</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (u) &#123;</div><div class="line">        ANS += val[u];</div><div class="line">        val[u] = <span class="number">0</span>;</div><div class="line">        u = last[u];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//添加模式串</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> u = <span class="number">0</span>, len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> c = idx(s[i]);</div><div class="line">        <span class="keyword">if</span> (!ch[u][c]) ch[u][c] = sz++;</div><div class="line">        u = ch[u][c];</div><div class="line">    &#125;</div><div class="line">    val[u]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//获得fail指针</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIGMA_SIZE; i++)</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) q.push(ch[<span class="number">0</span>][i]);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> r = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; SIGMA_SIZE; c++) &#123;</div><div class="line">            <span class="keyword">int</span> u = ch[r][c];</div><div class="line">            <span class="keyword">if</span> (!u) <span class="keyword">continue</span>;</div><div class="line">            q.push(u);</div><div class="line">            <span class="keyword">int</span> v = f[r];</div><div class="line">            <span class="comment">//和kmp相似，和根据父亲的fail指针获得当前的</span></div><div class="line">            <span class="keyword">while</span> (v &amp;&amp; ch[v][c] == <span class="number">0</span>) v = f[v];</div><div class="line">            f[u] = ch[v][c];</div><div class="line">            <span class="comment">//更新last</span></div><div class="line">            last[u] = val[f[u]] ? f[u] : last[f[u]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//进行匹配</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> * T)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(T), j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> c = idx(T[i]);</div><div class="line">        <span class="keyword">while</span> (j &amp;&amp; ch[j][c] == <span class="number">0</span>) j = f[j];</div><div class="line">        j = ch[j][c];</div><div class="line">        <span class="comment">//如果当前是模式串的结尾，那么更新答案</span></div><div class="line">        <span class="comment">//else if 里是处理一个模式串包含另一个模式串的情况</span></div><div class="line">        <span class="keyword">if</span> (val[j]) add(j);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (last[j]) add(last[j]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> str[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">while</span> (n--) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">            Creat(str);</div><div class="line">        &#125;</div><div class="line">        getFail();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">        ANS = <span class="number">0</span>;</div><div class="line">        find(str);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ANS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/09/25/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>持续正反馈的任务清单计划</title>
      <link>https://li-fish.github.io/2017/09/03/%E6%8C%81%E7%BB%AD%E6%AD%A3%E5%8F%8D%E9%A6%88%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%E8%AE%A1%E5%88%92/</link>
      <guid>https://li-fish.github.io/2017/09/03/%E6%8C%81%E7%BB%AD%E6%AD%A3%E5%8F%8D%E9%A6%88%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%E8%AE%A1%E5%88%92/</guid>
      <pubDate>Sun, 03 Sep 2017 11:17:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;http://chuantu.biz/t6/34/1504437603x2890149823.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;碎碎念：&quot;&gt;&lt;a href=&quot;#碎碎念：&quot; class=&quot;headerlink&quot; title=&quot;碎碎念：&quot;&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="http://chuantu.biz/t6/34/1504437603x2890149823.jpg" alt=""></p><h1 id="碎碎念："><a href="#碎碎念：" class="headerlink" title="碎碎念："></a>碎碎念：</h1><p>封面（姑且算是吧）是缘之空里的瑛，也算是主角之一了，最近推了缘之空的穹线和瑛线，无法自拔…</p><p>好吧接下来说下正题，这个其实就是一个任务清单，不过一般任务清单自己一般懒得的去完成，然后逐渐就忘记了这东西，并且涉及人物计划还可能很费时，之前也算是尝试了好多次，但都是以失败告终，一是当时高中时间安排的比较严格，没有自由安排的时间，完全不需要任务清单这种东西，另外就是这里的重点。对于一个任务清单，可能完成一项任务，任务本身对自己的正反馈不一定可以补偿完成任务的付出。然后现在也算是大二了，怕没有个任务清单的话，导致一学期过得浑浑噩噩的，需要一个东西来设定自己的计划。</p><h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><p>然后这次打算用一种方式解决上面的问题，首先重要的一点是，完成一项任务后要得到一定的奖励，这个奖励要对应完成任务所需要的付出，于是想来想去，感觉最好的奖励就是金钱了，然后就是给自己设定一些计划，用金钱去衡量完成任务得到的收益，以及完成任务所需要的付出。</p><p>这里有两点需要严格遵守的，一个是自己要严格一些，一些杂七杂八的东西就不要加到计划清单了，并且必须要完成的东西不要加进来，例如完成学校的作业等，这里列举一下算是值得加到任务清单事情：</p><ul><li>阅读一本书的第 x 章</li><li>学习主席树并完成习题</li><li>打完一场 Codeforce 并把力所能及的题补掉（这个任务可重复完成）</li></ul><p>另外一个重点是，每个任务的任务量一定小，不要上来就抛出一个 “阅读《算法导论》”的任务，对于这样难以完成的任务一定要拆开，比如拆成阅读完第几章等。</p><p>另外一点是拿金钱当奖励的，所以某些日常需求用到的钱是要和这里的奖励分开的，比如要买几点应季的衣服，或者普通吃顿饭，买书，就不必用奖励的前，对于“想要买个好一点的耳机”、“这个游戏真好玩，想买”这样的需求，就要从奖励里拿出了。</p><h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><p>计划大概是那样的，这里我打算暂时用印象笔记当工具，每个计划对应一个提醒，每次添加计划的时候输入计划的名字和奖励。</p><p>以后打算写一个网页或移动端的程序的，想来想去有点复杂，还是用印象笔记实现好了。</p><h1 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h1><p>以上大概就是全部的计划了，可以看得出来，完全要靠直接去遵守规则的，看起来有点像小孩子的过家家。不过如果能进行下去，感觉对自己应该是非常有益的，写这篇博客也算是警示一下自己吧，看看能坚持多久。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/09/03/%E6%8C%81%E7%BB%AD%E6%AD%A3%E5%8F%8D%E9%A6%88%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%E8%AE%A1%E5%88%92/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2017年暑假集训</title>
      <link>https://li-fish.github.io/2017/08/28/2017%E5%B9%B4%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD/</link>
      <guid>https://li-fish.github.io/2017/08/28/2017%E5%B9%B4%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD/</guid>
      <pubDate>Mon, 28 Aug 2017 10:38:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;一、时间内容&quot;&gt;&lt;a href=&quot;#一、时间内容&quot; class=&quot;headerlink&quot; title=&quot;一、时间内容&quot;&gt;&lt;/a&gt;一、时间内容&lt;/h1&gt;&lt;p&gt;2017年暑假，学校 ACM 算法实验室。对一个月集训的总结，也算是应付一下学校的社会实践作业。时间为7月2
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="一、时间内容"><a href="#一、时间内容" class="headerlink" title="一、时间内容"></a>一、时间内容</h1><p>2017年暑假，学校 ACM 算法实验室。对一个月集训的总结，也算是应付一下学校的社会实践作业。时间为7月24日至8月26日，总共五周34天。</p><p>时间差不多是早上8点就得到实验室，不过这次不像寒假集训那样每天要签到，结果日常迟到，刚开始几天还好，之后都是迟到个10几分钟…</p><p>老师对集训的安排是周一至周六全天训练，周日休息一天，除周二以外每天上午自己去刷专题学习算法，下午就进行组队赛，周三是一天都是学习算法和补题。周六是上午+下午两场个人赛，一周下来总共六场比赛，除去个人赛三个小时外，每场比赛都是5小时，训练强度可以说是挺高的了。</p><h1 id="二、体验与经历"><a href="#二、体验与经历" class="headerlink" title="二、体验与经历"></a>二、体验与经历</h1><p>这里就以时间为顺序写一下集训的趣事和重要经历好了。</p><p>我是在集训开始前几天就来学校刷了一会专题，搞了搞数论，算是弄懂了逆元、中国剩余定理、扩展欧几里得算法…对于基本的数论题算是没问题了，然后对数论不像之前那么怕了，讲道理我到时非常想仔细研究一下数论来着，毕竟算是数学中的皇后、最纯粹的数学了，然而图论真的是太有意思了～</p><p>然后过了几天就开始正式集训了，刘老师首先开始讲话，看参加集训的人数，大概有个100+人，看刘老师说是分算法组和数据结构组两部分，算法组的基本上就是面向比赛的集训队队员了，数据结构组，看刘老师的意思是想要把我们学校整体的水平提高上来，整个计院差不多700人，这样相当于有个1/6人都在大一结束的时候就完成了数据结构的学习，如果进展的好的话，可以说是非常恐怖了。</p><p>对于数据结构组我不太清楚，刘老师说了一下对算法组的安排，就是上面说的那样了，然后张老师在 VJ 上抓了 kuangbin 的专题，算是我们学习的大纲了。</p><p>接下来防不胜防的，刘老师说要开一场个人赛，算是让我们找到状态，当时就整个人就方了。</p><p>然后第二天上午就开始比赛了，由于过去一个多月了，记得也不是太清楚了，反正刚开始就是一堆的水题，唯一用到数据结构也就是单调栈和线段树，当时状态还不错，不过单调栈看了紫书才敲出来 ORZ 。最后 A 完7题后，就在看一个类似约瑟夫环的题，刚开始还以为是一个纯数学题，不过之前刷了很多的线段树的题，然后用朴素的思想想了一下，维护下标这个信息，突然发现用线段树可以搞，于是最后半个小时就非常开心的敲起了线段树，不得不说金桔的线段树的板子真的好用，然后自信的交上去，给了一个 Wrong Answer，然后比赛还有不到十分钟，本来没怎么有希望了，然后又去查了一下代码，区间更新 lazy 标记直接覆盖掉了，没累加，改掉之后交上去居然 A 了，非常开心，这时候也就五分钟了，于是和后面机位的 xuanhuang 聊了起来。开始第一场比赛 AK 可以说是非常开心了。</p><p>比赛结束后，就是日常的训练了，不过刚开始我们队比赛状态并不怎么好，经常前两个小时 A 完题，就咸鱼了，三个人坐着没事干。</p><p>然后就是每周的个人赛了，第一周的搜索算是非常开心，自己本身刷紫书的题的时候做了不少的搜索题，底子算是还可以，然后印象比较深的时候是一个题从 TLE 加剪枝优化，慢慢调成了 AC，非常开心，两次排名都是 Rank1。</p><p>组队赛的时候，非常幸运可以参加多校赛，也算是去见识下区域赛的题型，发现数学题居多，上来就是莫比乌斯反演、矩阵快速幂、快速傅里叶变换、卷积…刚开始打的一脸懵逼，感觉也就是做前几到简单题就尽力。然后感觉对于区域赛，感觉也只能思维活跃一点，把直接力所能及的题，做出来就好了。然后区域赛尽可能去拿一个铜牌甚至是银牌，如果是银牌的话，那就非常稳了，整个大二就可以平稳的去刷金牌题和知识点了（幻想ing）。</p><p>之后几个周都是一样的安排，整天不是刷题就是比赛，非常单调，值得一提的是最短路的测试赛又体验了一下 AK 的感觉，感觉自己对最短路理解也算是比较深了。</p><p>集训前几天一直在搞图论，先去学了下网络流，裸的 FF 算法， EK 算法， Dinic 算法都看了一下，网络流专题也算是刷了一半。感觉网络流算是图论里面一个比较重要的知识点了，之前区域赛的网络赛中经常有网络流的题。刷网络流的时候顺便去看了一下二分图匹配的问题，感觉匹配这个东西有点神奇，好多看起来和图论无关的问题，都可以转化到二分图的模型上，然后跑最大匹配就能解决好多问题。</p><p>之后因为实验室要开算法讲堂，然后就被叫去讲强连通缩点，于是用了一个星期咸鱼突刺了一下，算是弄清了强连通、边-双连通、点-双连通，然后就开始填算法讲堂的模板了，反反复复修正了得一两天，最后填的也不怎么样，等学离散数学的时候，一定要好好在图论上扩展一下！</p><p>最后只能就这样将强连通了，感觉讲的算是比较失败的了，没学过的估计没听懂，学过的也基本上不用听的。对比之前学长讲的树链剖分，当时我只看卿学姐的视频学了一下概念，然后听学长讲的居然听懂了，然后拿着板子去切了几个题，也算是会基本的树链剖分了，其实树链剖分实质上就是一种映射，目的是将一条链上的点映射到若干段连续的区间上，然后对于链上的修改，就对这几段连续的区间进行修改，对于连续的区间修改可以用线段树进行维护。于是这样树链剖分的题重点还算是在线段树上。</p><p>其他有意思的事情就是被派去辅导数据结构组的刷题了，然后发现他们是在做的 CCCC 的题，之前天梯赛训练的时候刷过的，然后给一个同学讲了一下树的同构的判断，发现直接好久没写过的指针了，我本以为给他写一个指针的比较好理解来着，最后写起来发现数组的好些太多了。另外一个就是看了一下目录树，之前在白书上面看到过，上面说的是静态排错，手写一个简单 shell ，也算是一个大模拟题了。看起来还是比较容易，记得天梯赛的时候，这个题曾经水过了20+分。</p><p>最后就是结训赛了，其实也都是比较水的题，大家都当做娱乐来做的，其实也挺娱乐的，最开心的是做出来了一道区域赛的 DP 题，感觉还可以，最后罚时有点多Rank2，还可以。</p><h1 id="三、一些感悟"><a href="#三、一些感悟" class="headerlink" title="三、一些感悟"></a>三、一些感悟</h1><p>一个多月以来，基本上都是自学算法，学习新算法也是自己去百度找资料、翻书，比起之前集训都是学长来讲内容，感觉自己的自学能力算是提高了不少。学习能力也是提高了不少，比如匈牙利算法，当初只用了一上午不到，就学完并刷了好多例题了。</p><p>另外一个重要的提升是，最近比赛的时候不再像之前那样，每次前两三个小时做出来题，之后就没事干了，现在基本上五个小时都在看题，尤其是最近一场比赛，前三个半小时都是爆零，知道三个半小时后才切掉了第一题，之后半小时又切了一题，最后十分钟队友又切了一道 KMP 的题，顿时咸鱼翻身。</p><p>之后也是打算继续搞算法竞赛，目测会打到大三吧。</p>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/08/28/2017%E5%B9%B4%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU6156 - Palindrome Function（数位DP）</title>
      <link>https://li-fish.github.io/2017/08/25/HDU6156-Palindrome-Function%EF%BC%88%E6%95%B0%E4%BD%8DDP%EF%BC%89/</link>
      <guid>https://li-fish.github.io/2017/08/25/HDU6156-Palindrome-Function%EF%BC%88%E6%95%B0%E4%BD%8DDP%EF%BC%89/</guid>
      <pubDate>Fri, 25 Aug 2017 02:37:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6156&quot; t
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6156" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=6156</a></p><hr><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>设函数 f(n, k) 的取值为，若 n 在 k 进制下为回文数字，那么函数值为 k 否则 为 1 。</p><p>给出 a ，b ，L， R。</p><p>求 $\sum_{i=a}^b$ $ \sum_{j = L}^R$ $f(i, j)$ 。</p><hr><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>CCPC 网络赛的题，算是一个裸的板子题了，数位 DP 之前也算是做过，不过没做过这种类型的数位 DP ，然后弃疗了。过了好久把数位 DP 的专题刷掉之后才来补的。</p><hr><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>定义状态<code>dp[start][pos][flag][k]</code></p><p>表示在 k 进制下以 start 位置开始的回文串，在 pos 位置下，回文串个数，flag 表示当前串是否为回文串。</p><p>对于前导零是忽略掉的，选取前导零就视为将 start 位置减一。对于回文串，前一半随意枚举就可以，后一半要进行判断。即对 <code>(start+1)/2 &gt; pos</code>的情况进行判断，这时候要用一个数组记录之前枚举的数字。</p><hr><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">50</span>;</div><div class="line"></div><div class="line">LL dp[MAX][MAX][<span class="number">2</span>][MAX];</div><div class="line"><span class="keyword">int</span> num[MAX], tmp[MAX], k;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> start, <span class="keyword">bool</span> flag, <span class="keyword">bool</span> bound)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (cur &lt; <span class="number">0</span>) <span class="keyword">return</span> flag;</div><div class="line">    <span class="keyword">if</span> (!bound &amp;&amp; dp[cur][start][flag][k] != <span class="number">-1</span>) <span class="keyword">return</span> dp[cur][start][flag][k];</div><div class="line">    <span class="keyword">int</span> last = bound ? num[cur] : k - <span class="number">1</span>;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= last; i++) &#123;</div><div class="line">        <span class="comment">//判断是否为前导零</span></div><div class="line">        <span class="keyword">bool</span> st = (cur == start &amp;&amp; i == <span class="number">0</span>);</div><div class="line">        <span class="keyword">bool</span> new_flag = flag;</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            <span class="comment">//如果当前是回文串的后半段的话，就判断下当前是否构成回文串</span></div><div class="line">            <span class="keyword">if</span> (!st &amp;&amp; cur &lt; (start + <span class="number">1</span>) / <span class="number">2</span>) new_flag = (tmp[start - cur] == i);</div><div class="line">        &#125;</div><div class="line">        tmp[cur] = i;</div><div class="line">        ans += dfs(cur - <span class="number">1</span>, st ? start - <span class="number">1</span> : start, new_flag, bound &amp;&amp; (i == last));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!bound) dp[cur][start][flag][k] = ans;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (n) &#123;</div><div class="line">        num[len++] = n % k;</div><div class="line">        n /= k;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dfs(len - <span class="number">1</span>, len - <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> Case = <span class="number">1</span>; Case &lt;= T; Case++) &#123;</div><div class="line">        <span class="keyword">int</span> a, b, l, r;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;a, &amp;b, &amp;l, &amp;r);</div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="comment">//枚举进制</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</div><div class="line">            k = i;</div><div class="line">            LL t = (solve(b) - solve(a - <span class="number">1</span>));</div><div class="line">            ans += (b - a + <span class="number">1</span>) + t * (k - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>, Case, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/08/25/HDU6156-Palindrome-Function%EF%BC%88%E6%95%B0%E4%BD%8DDP%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Gym 100917J Judgement(背包DP+bitset)</title>
      <link>https://li-fish.github.io/2017/08/21/Gym-100917J-Judgement-%E8%83%8C%E5%8C%85DP-bitset/</link>
      <guid>https://li-fish.github.io/2017/08/21/Gym-100917J-Judgement-%E8%83%8C%E5%8C%85DP-bitset/</guid>
      <pubDate>Mon, 21 Aug 2017 13:02:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/Gym-100917J&quot; target=&quot;_
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h1><p><a href="https://vjudge.net/problem/Gym-100917J" target="_blank" rel="external">https://vjudge.net/problem/Gym-100917J</a></p><hr><h1 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h1><p>给出两个长度为 n 序列 $ A_ {i}, B_ {i} $ 和 p , q。如果存在一个集合$c_ 1,c_ 2,c_ 3 \dots c_ k$，使得$(\sum A_ {c_ i} \ge p \wedge \sum B_ {c_ i} &lt; q) \bigvee (\sum A_ {c_ i} &lt; p \wedge \sum B_ {c_ i}  \ge q)$ 那么输出 NO，并用 01 输出集合中的元素，全集为1~n。</p><hr><h1 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h1><p>比赛的时候想用贪心暴力水一发的，居然水道37组样例，结果还是不对，赛后补的，也算是学下 bitset 了。</p><hr><h1 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h1><p>跑两次 DP，定义 dp[i] = j 的含义为，第一个序列的和为 i 时，第二个序列的最大值为 j。</p><p>我们只跑 i &lt; p 的，如果存在 j &gt;= q，那么就不符合上面的条件了。</p><p>然后对第一个序列第二个序列交换位置，再跑一次。</p><p>最后答案要输出路径，记录下最后从哪个状态转移而来的，并输出状态。</p><hr><h1 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1123456</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[MAX], b[MAX];</div><div class="line"><span class="built_in">bitset</span>&lt;120&gt; fa[MAX];</div><div class="line"><span class="keyword">int</span> dp[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> p = a[<span class="number">0</span>], q = b[<span class="number">0</span>];</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) fa[i].reset();</div><div class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = p; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (dp[j] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (j + a[i] &lt; p &amp;&amp; dp[j + a[i]] &lt; dp[j] + b[i]) &#123;</div><div class="line">                dp[j + a[i]] = dp[j] + b[i];</div><div class="line">                fa[j + a[i]] = fa[j];</div><div class="line">                fa[j + a[i]].<span class="built_in">set</span>(i);</div><div class="line">                <span class="keyword">if</span> (dp[j + a[i]] &gt;= q) &#123;</div><div class="line">                    <span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%d"</span>, (<span class="keyword">int</span>)fa[j+a[i]][k]);</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) swap(a[i], b[i]);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">if</span> (!(solve() || solve())) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/08/21/Gym-100917J-Judgement-%E8%83%8C%E5%8C%85DP-bitset/#disqus_thread</comments>
    </item>
    
    <item>
      <title>矩阵快速幂小结</title>
      <link>https://li-fish.github.io/2017/08/20/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E5%B0%8F%E7%BB%93/</link>
      <guid>https://li-fish.github.io/2017/08/20/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E5%B0%8F%E7%BB%93/</guid>
      <pubDate>Sun, 20 Aug 2017 05:30:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;感谢-amp-资料：&quot;&gt;&lt;a href=&quot;#感谢-amp-资料：&quot; class=&quot;headerlink&quot; title=&quot;感谢&amp;amp;资料：&quot;&gt;&lt;/a&gt;感谢&amp;amp;资料：&lt;/h1&gt;&lt;p&gt;非常感谢一些 up 主和博主分析的资料，矩阵快速幂好多书上没详细讲，于是搜了
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="感谢-amp-资料："><a href="#感谢-amp-资料：" class="headerlink" title="感谢&amp;资料："></a>感谢&amp;资料：</h1><p>非常感谢一些 up 主和博主分析的资料，矩阵快速幂好多书上没详细讲，于是搜了一些资料。</p><ul><li><a href="http://blog.csdn.net/wust_zzwh/article/details/52058209" target="_blank" rel="external">视频</a></li><li><a href="https://www.bilibili.com/video/av8570006/?from=search&amp;seid=16484167781382671487" target="_blank" rel="external">资料</a></li></ul><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>矩阵快速幂其实就是矩阵乘法 + 快速幂，上面的视频还讲了扩展的幂运算的含义，挺不错的，代码上的体现就是，将原本的数字相乘换成了矩阵相乘，其他都是一样的，实质就是加速了矩阵的幂运算，对原本 $O(n)$的幂运算加速到$O(\log n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">Mat <span class="title">pow_mod</span><span class="params">(Mat a, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="function">Mat <span class="title">rst</span><span class="params">(a.n, a.m)</span></span>;</div><div class="line">    rst.unit();</div><div class="line">    <span class="keyword">while</span> (k) &#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) rst = rst * a;</div><div class="line">        a = a * a;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这就是一个矩阵快速幂的核心代码，我这里重载了乘号，然后看起来和普通的快速幂根本没什么区别，unit 函数是将矩阵初始化为单位矩阵。</p><h1 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h1><p>通过上面的描述，矩阵快速幂其实就是加速矩阵的幂运算，但是这个有什么用呢？</p><p>在 ACM 竞赛中矩阵快速幂通常用来加速递推式的计算，将原本 $O (n)$ 的计算过程加速到 $O(k\log n)$ k 与矩阵的大小有关。</p><p>一个简单的例子就是用来计算斐波那契数列，假设要求斐波那契数列的第 n 项 $f_n$ 当 n 比较小直接用循环跑就可以了，这样是 $O(n)$ ，但是当 n 非常大甚至高达 $10^9$ 时用过这种朴素的方法进行递推肯定是超时的。</p><p>这时候就要用到矩阵快速幂，首先，也是最核心的一部，要找到递推关系和转移矩阵，对于斐波那契数列，非常任意就可以找到：</p><p>$\begin{bmatrix} 1 &amp; 1 \\ 1 &amp; 0 \end{bmatrix} \cdot \begin{bmatrix} f_{n-1} \\ f_{n-2} \end{bmatrix}  = \begin{bmatrix} f_{n-1} + f_{n-2} \\ f_{n-1} \end{bmatrix} = \begin{bmatrix} f_n \\ f_{n-1} \end{bmatrix}$</p><p>我们称第一个矩阵为转移矩阵，第二个一般是一个$n \times 1$的向量，右边的向量每乘一次转移矩阵，向量中的每个元素根据递推式往后推了一次。</p><p>这时我设 $A_n = \begin{bmatrix} f_n \\ f_{n-1} \end{bmatrix}$ , $T =  \begin{bmatrix} 1 &amp; 1 \\ 1 &amp; 0 \end{bmatrix}$那么显然有 $A_n = T^{n-1} \cdot A_{1}$.</p><p>转移我们对 T 这个转移矩阵就行快速幂，就可以再乘以 $A_1$ 就能算出来 $A_n$，复杂度是 $O(k\log n)$ 。</p><p>通过上面的分析，其实矩阵快速幂在应用的时候，难点是找出转移矩阵 T 和 $A_1$ ，下面给出一些简单的递推式练手：</p><p>$f_n = a\cdot f_{n-1} + b\cdot f_{n-2} + c$ (a, b, c是常数)</p><p>$\begin{bmatrix} a &amp; b &amp; 1 \\ 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix} \cdot \begin{bmatrix} f_{n-1} \\ f_{n-2} \\\ c \end{bmatrix}   = \begin{bmatrix} f_n \\ f_{n-1} \\\ c\end{bmatrix}$</p><p>$f_n = c^n - f_{n-1}$</p><p>$\begin{bmatrix} -1 &amp; c \\ 0 &amp; c \end{bmatrix} \cdot \begin{bmatrix} f_{n-1} \\ c^{n-1} \end{bmatrix}  =  \begin{bmatrix} f_n \\ c^{n} \end{bmatrix}$</p><h1 id="板子："><a href="#板子：" class="headerlink" title="板子："></a>板子：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span> &#123;</span></div><div class="line">    ll v[<span class="number">112</span>][<span class="number">112</span>];</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line">    Mat(<span class="keyword">int</span> tn, <span class="keyword">int</span> tm) &#123;</div><div class="line">        n = tn, m = tm;</div><div class="line">        <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (i == j) v[i][j] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> v[i][j] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;v[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</div><div class="line">                <span class="built_in">printf</span>(j == m - <span class="number">1</span> ? <span class="string">"%d\n"</span> : <span class="string">"%d "</span>, v[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Mat <span class="keyword">operator</span>*(<span class="keyword">const</span> Mat &amp;a) &#123;</div><div class="line">        <span class="function">Mat <span class="title">rst</span><span class="params">(n, a.m)</span></span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.m; j++) &#123;</div><div class="line">                ll t = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</div><div class="line">                    t += v[i][k] * a.v[k][j] % MOD;</div><div class="line">                    t = t % MOD;</div><div class="line">                &#125;</div><div class="line">                rst.v[i][j] = t;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rst;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">pow_mod</span><span class="params">(Mat a, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="function">Mat <span class="title">rst</span><span class="params">(a.n, a.m)</span></span>;</div><div class="line">    rst.unit();</div><div class="line">    <span class="keyword">while</span> (k) &#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) rst = rst * a;</div><div class="line">        a = a * a;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> rst;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="function">Mat <span class="title">a</span><span class="params">(n, n)</span></span>;</div><div class="line">    a.read();</div><div class="line">    pow_mod(a, m).out();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="简单练习："><a href="#简单练习：" class="headerlink" title="简单练习："></a>简单练习：</h1><ul><li><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1137" target="_blank" rel="external">矩阵乘法</a></li><li><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1113" target="_blank" rel="external">裸的矩阵快速幂</a></li><li><a href="http://poj.org/problem?id=3070" target="_blank" rel="external">计算斐波那契数列</a></li><li><a href="http://acm.hdu.edu.cn/showproblem.PHP?pid=1757" target="_blank" rel="external">简单的推导转移矩阵</a></li><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1575" target="_blank" rel="external">裸题</a></li></ul>]]></content:encoded>
      
      <comments>https://li-fish.github.io/2017/08/20/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E5%B0%8F%E7%BB%93/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
